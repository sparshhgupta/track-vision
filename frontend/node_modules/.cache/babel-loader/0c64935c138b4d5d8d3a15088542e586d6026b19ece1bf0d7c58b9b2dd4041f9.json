{"ast":null,"code":"// src/arrays.ts\nfunction createArray(size, start = 1) {\n  return Array.from({\n    length: size\n  }, (_, index) => index + start);\n}\nfunction getRandomItem(input) {\n  return input[Math.floor(Math.random() * input.length)];\n}\nfunction quickSort(input, comparator = sortComparator) {\n  const output = [...input];\n  const recursiveSort = (start, end) => {\n    if (end - start < 1) {\n      return;\n    }\n    const pivotValue = output[end];\n    let splitIndex = start;\n    for (let index = start; index < end; index++) {\n      const sort = comparator(output[index], pivotValue);\n      if (sort === -1) {\n        if (splitIndex !== index) {\n          const temp = output[splitIndex];\n          output[splitIndex] = output[index];\n          output[index] = temp;\n        }\n        splitIndex++;\n      }\n    }\n    output[end] = output[splitIndex];\n    output[splitIndex] = pivotValue;\n    recursiveSort(start, splitIndex - 1);\n    recursiveSort(splitIndex + 1, end);\n  };\n  recursiveSort(0, input.length - 1);\n  return output;\n}\nfunction removeDuplicates(input) {\n  return [...new Set(input)];\n}\nfunction shuffle(input) {\n  let currentIndex = input.length;\n  let randomIndex;\n  let temporaryValue;\n  const output = [...input];\n  while (currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex--);\n    temporaryValue = output[currentIndex];\n    output[currentIndex] = output[randomIndex];\n    output[randomIndex] = temporaryValue;\n  }\n  return output;\n}\nfunction sortByLocaleCompare(key, options = {}) {\n  const {\n    descending,\n    ...compareOptions\n  } = options;\n  if (key) {\n    if (descending) {\n      return (left, right) => right[key].toLowerCase().localeCompare(left[key].toLowerCase(), void 0, compareOptions);\n    }\n    return (left, right) => left[key].toLowerCase().localeCompare(right[key].toLowerCase(), void 0, compareOptions);\n  }\n  if (descending) {\n    return (left, right) => right.toLowerCase().localeCompare(left.toLowerCase(), void 0, compareOptions);\n  }\n  return (left, right) => left.toLowerCase().localeCompare(right.toLowerCase(), void 0, compareOptions);\n}\nfunction sortByPrimitive(key, descending = false) {\n  const firstComparator = descending ? 1 : -1;\n  const secondComparator = descending ? -1 : 1;\n  if (key) {\n    return (left, right) => {\n      if (left[key] === right[key]) {\n        return 0;\n      }\n      return left[key] < right[key] ? firstComparator : secondComparator;\n    };\n  }\n  return (left, right) => {\n    if (left === right) {\n      return 0;\n    }\n    return left < right ? firstComparator : secondComparator;\n  };\n}\nfunction sortComparator(left, right) {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\nfunction splitIntoChunks(input, chunkSize = 25) {\n  if (!Array.isArray(input)) {\n    throw new TypeError(\"expected an array for the first argument\");\n  }\n  const chunks = [];\n  for (let index = 0; index < Math.ceil(input.length / chunkSize); index++) {\n    chunks.push(input.slice(index * chunkSize, (index + 1) * chunkSize));\n  }\n  return chunks;\n}\n\n// src/async.ts\nimport is from \"is-lite\";\nvar ASYNC_STATUS = {\n  IDLE: \"IDLE\",\n  PENDING: \"PENDING\",\n  SUCCESS: \"SUCCESS\",\n  ERROR: \"ERROR\"\n};\nfunction cors(data, statusCodeOrOptions = 200) {\n  const {\n    allowCredentials = true,\n    allowedHeaders = [],\n    methods = [\"GET\"],\n    origin = \"*\",\n    responseHeaders = void 0,\n    statusCode = 200\n  } = is.number(statusCodeOrOptions) ? {\n    statusCode: statusCodeOrOptions\n  } : statusCodeOrOptions;\n  const allowMethods = [...methods, \"OPTIONS\"];\n  const allowHeaders = [... /* @__PURE__ */new Set([\"Accept-Version\", \"Accept\", \"Authorization\", \"Content-Length\", \"Content-MD5\", \"Content-Type\", \"Date\", \"x-amz-date\", \"x-amz-security-token\", \"X-Api-Version\", \"X-CSRF-Token\", \"X-Requested-With\", ...allowedHeaders])];\n  let exposedHeaders;\n  if (responseHeaders) {\n    exposedHeaders = {\n      \"Access-Control-Expose-Headers\": Object.keys(responseHeaders).join(\",\"),\n      ...responseHeaders\n    };\n  }\n  return {\n    body: JSON.stringify(data),\n    headers: {\n      \"Access-Control-Allow-Origin\": origin,\n      \"Access-Control-Allow-Credentials\": allowCredentials,\n      \"Access-Control-Allow-Methods\": allowMethods.join(\",\"),\n      \"Access-Control-Allow-Headers\": allowHeaders.join(\",\"),\n      ...exposedHeaders\n    },\n    statusCode\n  };\n}\nasync function poll(condition, options = {}) {\n  const {\n    delay = 1,\n    maxRetries = 5\n  } = options;\n  let retries = 0;\n  while (!condition() && retries <= maxRetries) {\n    await sleep(delay);\n    retries++;\n  }\n  if (retries >= maxRetries) {\n    throw new Error(\"Timeout\");\n  }\n}\nasync function request(url, options = {}) {\n  const {\n    body,\n    headers,\n    method = \"GET\"\n  } = options;\n  if (!url) {\n    throw new Error(\"URL is required\");\n  }\n  const params = {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      ...headers\n    },\n    method\n  };\n  if (body) {\n    params.body = is.plainObject(body) ? JSON.stringify(body) : body;\n  }\n  return fetch(url, params).then(async response => {\n    const text = await response.text();\n    let content;\n    try {\n      content = JSON.parse(text);\n    } catch {\n      content = text;\n    }\n    if (response.status > 299) {\n      const error = new Error(response.statusText);\n      error.status = response.status;\n      error.response = content;\n      throw error;\n    } else {\n      return content;\n    }\n  });\n}\nfunction sleep(seconds = 1) {\n  return new Promise(resolve => {\n    setTimeout(resolve, seconds * 1e3);\n  });\n}\n\n// src/date.ts\nimport is2 from \"is-lite\";\n\n// src/strings.ts\nfunction capitalize(input) {\n  return input.charAt(0).toLocaleUpperCase() + input.slice(1).toLocaleLowerCase();\n}\nfunction cleanupHTML(input) {\n  return removeWhitespace(removeEmptyTags(input));\n}\nfunction cleanupNumericString(value = \"\") {\n  return value.replace(/\\D+/g, \"\");\n}\nfunction cleanupURI(input) {\n  return input.replace(/[$&+,/:;=?@]/g, \"\");\n}\nfunction getInitials(input) {\n  if (!input) {\n    return \"\";\n  }\n  const names = input.trim().split(\" \");\n  if (names.length === 1) {\n    return `${names[0].charAt(0)}`;\n  }\n  return `${names[0].charAt(0)}${names[names.length - 1].charAt(0)}`;\n}\nfunction pluralize(quantity, singular, plural) {\n  if (quantity === 1) {\n    return singular;\n  }\n  return plural || `${singular}s`;\n}\nfunction removeAccents(input) {\n  const removalMap = {\n    A: /[AÀÁÂÃÄÅĀĂĄǍǞǠǺȀȂȦḀẠẢẤẦẨẪẬẮẰẲẴẶⒶＡ]/g,\n    AA: /Ꜳ/g,\n    AE: /[ÆǢǼ]/g,\n    AO: /Ꜵ/g,\n    AU: /Ꜷ/g,\n    AV: /[ꜸꜺ]/g,\n    AY: /Ꜽ/g,\n    B: /[BƁƂɃḂḄḆⒷＢ]/g,\n    C: /[CÇĆĈĊČƇȻḈⒸꜾＣ]/g,\n    D: /[DĎĐƉƊƋḊḌḎḐḒⒹꝹＤ]/g,\n    DZ: /[ǄǱ]/g,\n    Dz: /[ǅǲ]/g,\n    E: /[EÈÉÊËĒĔĖĘĚƎƐȄȆȨḔḖḘḚḜẸẺẼẾỀỂỄỆⒺＥ]/g,\n    F: /[FƑḞⒻꝻＦ]/g,\n    G: /[GĜĞĠĢƓǤǦǴḠⒼꝽꝾꞠＧ]/g,\n    H: /[HĤĦȞḢḤḦḨḪⒽⱧⱵꞍＨ]/g,\n    I: /[IÌÍÎÏĨĪĬĮİƗǏȈȊḬḮỈỊⒾＩ]/g,\n    J: /[JĴɈⒿＪ]/g,\n    K: /[KĶƘǨḰḲḴⓀⱩꝀꝂꝄꞢＫ]/g,\n    L: /[LĹĻĽĿŁȽḶḸḺḼⓁⱠⱢꝆꝈꞀＬ]/g,\n    LJ: /Ǉ/g,\n    Lj: /ǈ/g,\n    M: /[MƜḾṀṂⓂⱮＭ]/g,\n    N: /[NÑŃŅŇƝǸȠṄṆṈṊⓃꞐꞤＮ]/g,\n    NJ: /Ǌ/g,\n    Nj: /ǋ/g,\n    O: /[OÒÓÔÕÖØŌŎŐƆƟƠǑǪǬǾȌȎȪȬȮȰṌṎṐṒỌỎỐỒỔỖỘỚỜỞỠỢⓄꝊꝌＯ]/g,\n    OI: /Ƣ/g,\n    OO: /Ꝏ/g,\n    OU: /Ȣ/g,\n    P: /[PƤṔṖⓅⱣꝐꝒꝔＰ]/g,\n    Q: /[QɊⓆꝖꝘＱ]/g,\n    R: /[RŔŖŘȐȒɌṘṚṜṞⓇⱤꝚꞂꞦＲ]/g,\n    S: /[SŚŜŞŠȘṠṢṤṦṨẞⓈⱾꞄꞨＳ]/g,\n    T: /[TŢŤŦƬƮȚȾṪṬṮṰⓉꞆＴ]/g,\n    TZ: /Ꜩ/g,\n    U: /[UÙÚÛÜŨŪŬŮŰŲƯǓǕǗǙǛȔȖɄṲṴṶṸṺỤỦỨỪỬỮỰⓊＵ]/g,\n    V: /[VƲɅṼṾⓋꝞＶ]/g,\n    VY: /Ꝡ/g,\n    W: /[WŴẀẂẄẆẈⓌⱲＷ]/g,\n    X: /[XẊẌⓍＸ]/g,\n    Y: /[YÝŶŸƳȲɎẎỲỴỶỸỾⓎＹ]/g,\n    Z: /[ZŹŻŽƵȤẐẒẔⓏⱫⱿꝢＺ]/g,\n    a: /[aàáâãäåāăąǎǟǡǻȁȃȧɐḁẚạảấầẩẫậắằẳẵặⓐⱥａ]/g,\n    aa: /ꜳ/g,\n    ae: /[æǣǽ]/g,\n    ao: /ꜵ/g,\n    au: /ꜷ/g,\n    av: /[ꜹꜻ]/g,\n    ay: /ꜽ/g,\n    b: /[bƀƃɓḃḅḇⓑｂ]/g,\n    c: /[cçćĉċčƈȼḉↄⓒꜿｃ]/g,\n    d: /[dďđƌɖɗḋḍḏḑḓⓓꝺｄ]/g,\n    dz: /[ǆǳ]/g,\n    e: /[eèéêëēĕėęěǝȅȇȩɇɛḕḗḙḛḝẹẻẽếềểễệⓔｅ]/g,\n    f: /[fƒḟⓕꝼｆ]/g,\n    g: /[gĝğġģǥǧǵɠᵹḡⓖꝿꞡｇ]/g,\n    h: /[hĥħȟɥḣḥḧḩḫẖⓗⱨⱶｈ]/g,\n    hv: /ƕ/g,\n    i: /[iìíîïĩīĭįıǐȉȋɨḭḯỉịⓘｉ]/g,\n    j: /[jĵǰɉⓙｊ]/g,\n    k: /[kķƙǩḱḳḵⓚⱪꝁꝃꝅꞣｋ]/g,\n    l: /[lĺļľŀłſƚɫḷḹḻḽⓛⱡꝇꝉꞁｌ]/g,\n    lj: /ǉ/g,\n    m: /[mɯɱḿṁṃⓜｍ]/g,\n    n: /[nñńņňŉƞǹɲṅṇṉṋⓝꞑꞥｎ]/g,\n    nj: /ǌ/g,\n    o: /[oòóôõöøōŏőơǒǫǭǿȍȏȫȭȯȱɔɵṍṏṑṓọỏốồổỗộớờởỡợⓞꝋꝍｏ]/g,\n    oi: /ƣ/g,\n    ou: /ȣ/g,\n    oo: /ꝏ/g,\n    p: /[pƥᵽṕṗⓟꝑꝓꝕｐ]/g,\n    q: /[qɋⓠꝗꝙｑ]/g,\n    r: /[rŕŗřȑȓɍɽṙṛṝṟⓡꝛꞃꞧｒ]/g,\n    s: /[sßśŝşšșȿṡṣṥṧṩẛⓢꞅꞩｓ]/g,\n    t: /[tţťŧƭțʈṫṭṯṱẗⓣⱦꞇｔ]/g,\n    tz: /ꜩ/g,\n    u: /[uùúûüũūŭůűųưǔǖǘǚǜȕȗʉṳṵṷṹṻụủứừửữựⓤｕ]/g,\n    v: /[vʋʌṽṿⓥꝟｖ]/g,\n    vy: /ꝡ/g,\n    w: /[wŵẁẃẅẇẉẘⓦⱳｗ]/g,\n    x: /[xẋẍⓧｘ]/g,\n    y: /[yýÿŷƴȳɏẏẙỳỵỷỹỿⓨｙ]/g,\n    z: /[zźżžƶȥɀẑẓẕⓩⱬꝣｚ]/g\n  };\n  let parsedString = input;\n  Object.entries(removalMap).forEach(([key, value]) => {\n    parsedString = parsedString.replace(value, key);\n  });\n  return parsedString;\n}\nfunction removeEmojis(input) {\n  const baseEmojiRegex = /[\\u2700-\\u27bf]|\\ud83c[\\udde6-\\uddff]{2}|[\\ud800-\\udbff][\\udc00-\\udfff]/;\n  const variationSelectorRegex = /[\\ufe0e\\ufe0f]?/;\n  const modifierRegex = /[\\u0300-\\u036f\\u20d0-\\u20f0\\ufe20-\\ufe23]|\\ud83c[\\udffb-\\udfff]/;\n  const zeroWidthJoinerRegex = /\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\u20d0-\\u20f0\\ufe20-\\ufe23]|\\ud83c[\\udffb-\\udfff])?/;\n  const emojiRegex = new RegExp(`(?:${baseEmojiRegex.source})${variationSelectorRegex.source}(?:${modifierRegex.source})?(?:${zeroWidthJoinerRegex.source})*`, \"g\");\n  return input.replace(emojiRegex, \"\").trim();\n}\nfunction removeEmptyTags(input) {\n  return input.replace(/<[^/>][^>]*>\\s*<\\/[^>]+>/gi, \"\");\n}\nfunction removeNonPrintableCharacters(input) {\n  return input.replace(/[^\\x20-\\x7E´\\u00C0-\\u00FFˆ˜]+/g, \"\");\n}\nfunction removeTags(input) {\n  return input.replace(/(<([^>]+)>)/gi, \"\");\n}\nfunction removeWhitespace(input) {\n  return input.replace(/\\r\\n|\\r|\\n|\\t/g, \"\").replace(/ +/g, \" \");\n}\nfunction slugify(input) {\n  return removeAccents(input).replace(/[\\u0300-\\u036f]/g, \"\").replace(/[()]/g, \"\").replace(/ /g, \"-\").replace(/[\"%<>\\\\^`{|}]/g, \"\").toLowerCase();\n}\n\n// src/date.ts\nvar MINUTE = 60;\nvar HOUR = MINUTE * 60;\nvar DAY = HOUR * 24;\nvar WEEK = DAY * 7;\nvar MONTH = DAY * 30;\nvar YEAR = 365 * DAY;\nfunction isIsoDate(input) {\n  if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(input)) {\n    return false;\n  }\n  const date = new Date(input);\n  return date.toISOString() === input;\n}\nfunction isoDate(input) {\n  if (typeof input !== \"undefined\") {\n    return new Date(input).toISOString();\n  }\n  return (/* @__PURE__ */new Date()).toISOString();\n}\nfunction isValidDate(input) {\n  const date = is2.date(input) ? input : new Date(input);\n  return !Number.isNaN(date.getTime());\n}\nfunction now() {\n  return Math.floor(Date.now() / 1e3);\n}\nfunction timeSince(input, options) {\n  const {\n    day = \"day\",\n    days,\n    hour = \"hour\",\n    hours,\n    minute = \"minute\",\n    minutes,\n    month = \"month\",\n    months,\n    prefix,\n    second = \"second\",\n    seconds,\n    skipWeeks = false,\n    suffix = \"ago\",\n    week = \"week\",\n    weeks,\n    year = \"year\",\n    years\n  } = options || {};\n  const date = typeof input === \"number\" ? input : timestamp(input);\n  const diff = now() - date;\n  let quantity = Math.floor(diff / YEAR);\n  const output = (value, caption) => {\n    let result = `${value} ${caption}`;\n    if (prefix) {\n      result = `${prefix} ${result}`;\n    }\n    if (suffix) {\n      result = `${result} ${suffix}`;\n    }\n    return result;\n  };\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, year, years));\n  }\n  quantity = Math.floor(diff / MONTH);\n  if (quantity > 1) {\n    return output(quantity, pluralize(quantity, month, months));\n  }\n  if (!skipWeeks) {\n    quantity = Math.floor(diff / WEEK);\n    if (quantity > 1) {\n      return output(quantity, pluralize(quantity, week, weeks));\n    }\n  }\n  quantity = Math.floor(diff / DAY);\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, day, days));\n  }\n  quantity = Math.floor(diff / HOUR);\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, hour, hours));\n  }\n  quantity = Math.floor(diff / MINUTE);\n  if (quantity > 1) {\n    return output(quantity, pluralize(quantity, minute, minutes));\n  }\n  return output(Math.floor(diff), pluralize(diff, second, seconds));\n}\nfunction timestamp(input) {\n  if (!input) {\n    return now();\n  }\n  const date = typeof input === \"string\" ? new Date(input) : input;\n  return Math.floor(date.getTime() / 1e3);\n}\n\n// src/devices.ts\nfunction isDarkMode() {\n  return !!window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n}\nfunction isTouchDevice() {\n  return !!window.matchMedia && window.matchMedia(\"(pointer: coarse)\").matches;\n}\nfunction prefersReducedMotion() {\n  return !!window.matchMedia && window.matchMedia(\"prefers-reduced-motion\").matches;\n}\n\n// src/formatters.ts\nfunction formatBoolean(input) {\n  return input ? \"Yes\" : \"No\";\n}\nfunction formatCPF(value) {\n  const clearValue = cleanupNumericString(value);\n  if (clearValue.length >= 10) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(6, 9)}-${clearValue.slice(9, 11)}`;\n  } else if (clearValue.length >= 7) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(6, 9)}`;\n  } else if (clearValue.length >= 4) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}`;\n  }\n  return clearValue;\n}\nfunction formatDateLocale(input, options = {}) {\n  const {\n    locale = \"en-GB\",\n    showTime = false\n  } = options;\n  const formatOptions = {\n    year: \"2-digit\",\n    month: \"2-digit\",\n    day: \"2-digit\"\n  };\n  if (showTime) {\n    formatOptions.hour = \"2-digit\";\n    formatOptions.minute = \"2-digit\";\n  }\n  return new Date(input).toLocaleDateString(locale, formatOptions);\n}\nfunction formatMoney(input, options = {}) {\n  const {\n    decimalChar = \".\",\n    showCents = false,\n    symbol = \"$\",\n    thousandsChar = \",\"\n  } = options;\n  const isNegative = input < 0;\n  const value = Math.abs(input);\n  const [amount, cents] = value.toFixed(2).split(\".\");\n  const padStart = amount.length > 3 ? amount.length % 3 : 0;\n  const initial = amount.slice(0, padStart);\n  const remain = amount.slice(padStart).replace(/(\\d{3})(?=\\d)/g, `$1${thousandsChar}`);\n  let formatted = `${remain}`;\n  if (initial) {\n    formatted = `${initial}${thousandsChar}${remain}`;\n  }\n  if (cents !== \"00\" || showCents) {\n    formatted += `${decimalChar}${cents}`;\n  }\n  return `${isNegative ? \"-\" : \"\"}${symbol}${formatted}`;\n}\nfunction formatPhoneBR(input) {\n  const phone = input.replace(/\\D/g, \"\");\n  if (phone.length === 8) {\n    return phone.replace(/^(\\d{4})(\\d{4}).*/, \"$1-$2\");\n  }\n  if (phone.length === 9) {\n    return phone.replace(/^(\\d{5})(\\d{4}).*/, \"$1-$2\");\n  }\n  if (phone.length === 10 || phone.length === 11) {\n    return phone.replace(/^(\\d{2})(\\d{4,5})(\\d{4}).*/, \"($1) $2-$3\");\n  }\n  return phone;\n}\nfunction formatPhoneUS(input) {\n  const phone = input.replace(/\\D/g, \"\");\n  if (phone.length === 10) {\n    return phone.replace(/^(\\d{3})(\\d{3})(\\d{4}).*/, \"($1) $2-$3\");\n  }\n  if (phone.length === 11 && phone.startsWith(\"1\")) {\n    return phone.replace(/^1(\\d{3})(\\d{3})(\\d{4}).*/, \"+1 ($1) $2-$3\");\n  }\n  return phone;\n}\nfunction formatPostalCodeBR(value) {\n  const clearValue = cleanupNumericString(value);\n  if (clearValue.length >= 6) {\n    return `${clearValue.slice(0, 5)}-${clearValue.slice(5, 8)}`;\n  }\n  return clearValue;\n}\n\n// src/functions.ts\nfunction debounce(callback, delay) {\n  let timeout;\n  return (...parameters) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => callback(...parameters), delay);\n  };\n}\nfunction demethodize(fn) {\n  return (parameter, ...rest) => fn.apply(parameter, rest);\n}\nasync function measureExecutionTime(callback) {\n  const start = performance.now();\n  const result = await callback();\n  const end = performance.now();\n  const total = end - start;\n  console.log(`Completed in ${Math.ceil(total)} milliseconds`);\n  return result;\n}\nfunction noop() {\n  return void 0;\n}\nfunction once(fn) {\n  let done = false;\n  let result;\n  return function Fn(...arguments_) {\n    if (!done) {\n      done = true;\n      result = fn(...arguments_);\n    }\n    return result;\n  };\n}\nfunction pipe(...fns) {\n  return input => fns.reduce((previousValue, fn) => fn(previousValue), input);\n}\n\n// src/misc.ts\nimport is3 from \"is-lite\";\n\n// src/numbers.ts\nfunction ceil(input, digits = 2) {\n  const factor = 10 ** digits;\n  return Math.ceil(input * factor) / factor;\n}\nfunction clamp(value, min = 0, max = 100) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction floor(input, digits = 2) {\n  const factor = 10 ** digits;\n  return Math.floor(input * factor) / factor;\n}\nfunction pad(input, length = 2) {\n  return `${input}`.padStart(length, \"0\");\n}\nfunction percentage(input, total, digits = 2) {\n  const result = input / total * 100;\n  return Number.isFinite(result) ? round(result, digits) : 0;\n}\nfunction randomNumber(min = 0, max = 10) {\n  if (min >= max) {\n    return max;\n  }\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction round(input, digits = 2) {\n  const factor = 10 ** digits;\n  return Math.round(input * factor) / factor;\n}\n\n// src/misc.ts\nfunction canUseDOM() {\n  return !!(typeof window !== \"undefined\" && window.document?.createElement);\n}\nfunction conditional(cases, defaultCase) {\n  for (const [expression, callback] of cases) {\n    if (expression) {\n      return callback();\n    }\n  }\n  return defaultCase?.();\n}\nasync function copyToClipboard(input) {\n  try {\n    await navigator.clipboard.writeText(input);\n  } catch {\n    return false;\n  }\n  return true;\n}\nfunction getDataType(input, toLowerCase = false) {\n  const dataTypeName = Object.prototype.toString.call(input).slice(8, -1);\n  let output = dataTypeName;\n  if (/HTML\\w+Element/.test(dataTypeName)) {\n    output = \"HTMLElement\";\n  }\n  return toLowerCase ? output.toLowerCase() : output;\n}\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  const value = is3.function(message) ? message() : message;\n  throw new Error(value);\n}\nfunction isJSON(input) {\n  try {\n    JSON.parse(input);\n  } catch {\n    return false;\n  }\n  return true;\n}\nfunction isRequired(input = \"parameter\", Constructable = TypeError) {\n  throw new Constructable(`\"${input}\" is required`);\n}\nfunction logger(type, title, data, options = {}) {\n  const {\n    collapsed = true,\n    hideTimestamp = false,\n    skip = false,\n    typeColor = \"gray\"\n  } = options;\n  const groupMethod = collapsed ? console.groupCollapsed : console.group;\n  const date = /* @__PURE__ */new Date();\n  const parts = [`%c ${type}`];\n  const styles = [`color: ${typeColor}; font-weight: lighter;`, \"color: inherit;\"];\n  if (!hideTimestamp) {\n    styles.push(\"color: gray; font-weight: lighter;\");\n  }\n  const time = `${pad(date.getHours(), 2)}:${pad(date.getMinutes(), 2)}:${pad(date.getSeconds(), 2)}`;\n  parts.push(`%c${title}`);\n  if (!hideTimestamp) {\n    parts.push(`%c@ ${time}`);\n  }\n  if (!skip) {\n    groupMethod(parts.join(\" \"), ...styles);\n    console.log(data);\n    console.groupEnd();\n  }\n}\nfunction nullify(value) {\n  return value ?? null;\n}\nfunction on(target, ...rest) {\n  if (target?.addEventListener) {\n    target.addEventListener(...rest);\n  }\n}\nfunction off(target, ...rest) {\n  if (target?.removeEventListener) {\n    target.removeEventListener(...rest);\n  }\n}\nfunction popupCenter(url, title, width, height) {\n  const {\n    screen,\n    screenLeft,\n    screenTop\n  } = window;\n  let screenWidth = window.innerWidth;\n  let screenHeight = window.innerHeight;\n  if (!screenWidth) {\n    screenWidth = document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;\n  }\n  if (!screenHeight) {\n    screenHeight = document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;\n  }\n  const left = screenWidth / 2 - width / 2 + screenLeft;\n  const top = screenHeight / 2 - height / 2 + screenTop;\n  const popup = window.open(url, title, `menubar=no,location=no,resizable=no,scrollbars=yees,status=no,width=${width},height=${height},top=${top}, left=${left}`);\n  if (popup) {\n    popup.focus();\n  }\n  return popup;\n}\nfunction px(value) {\n  return is3.number(value) || is3.numericString(value) ? `${value}px` : value;\n}\nfunction unique(length = 8, options = {}) {\n  const {\n    includeLowercase = true,\n    includeNumbers = true,\n    includeSymbols = false,\n    includeUppercase = true\n  } = options;\n  const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n  const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const numbers = \"0123456789\";\n  const symbols = \"!?@#$%^&*+_-=:.~\";\n  let characters = \"\";\n  if (includeLowercase) {\n    characters += lowercase;\n  }\n  if (includeUppercase) {\n    characters += uppercase;\n  }\n  if (includeNumbers) {\n    characters += numbers;\n  }\n  if (includeSymbols) {\n    characters += symbols;\n  }\n  let result = \"\";\n  for (let index = length; index > 0; --index) {\n    result += characters[Math.round(Math.random() * (characters.length - 1))];\n  }\n  return result;\n}\nfunction uuid() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === \"x\" ? r : r & 3 | 8;\n    return v.toString(16);\n  });\n}\n\n// src/objects.ts\nimport is4 from \"is-lite\";\nfunction cleanUpObject(input) {\n  const output = {};\n  for (const key in input) {\n    if (input[key] !== void 0) {\n      output[key] = input[key];\n    }\n  }\n  return output;\n}\nfunction getNestedProperty(input, path) {\n  if (!is4.plainObject(input) && !is4.array(input) || !path) {\n    return input;\n  }\n  const segments = path.split(\".\");\n  const {\n    length\n  } = segments;\n  let output = input;\n  for (let index = 0; index < length; index++) {\n    const currentSegment = segments[index];\n    const remainingSegments = segments.slice(index + 1);\n    if (currentSegment === \"+\" && is4.array(output) && remainingSegments.length === 1) {\n      return output.map(d => d[remainingSegments.join(\".\")]);\n    }\n    try {\n      output = output[currentSegment];\n    } catch {}\n  }\n  return output;\n}\nfunction invertKeys(input) {\n  if (!is4.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  const result = {};\n  for (const [key, value] of Object.entries(input)) {\n    result[value] = key;\n  }\n  return result;\n}\nfunction keyMirror(input) {\n  if (!is4.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  const output = {};\n  for (const key in input) {\n    if (!Object.prototype.hasOwnProperty.call(output, key)) {\n      output[key] = key;\n    }\n  }\n  return output;\n}\nfunction mergeProps(defaultProps, props) {\n  const cleanProps = cleanUpObject(props);\n  return {\n    ...defaultProps,\n    ...cleanProps\n  };\n}\nfunction objectEntries(input) {\n  return Object.entries(input);\n}\nfunction objectKeys(input) {\n  return Object.keys(input);\n}\nfunction objectToArray(input, includeOnly) {\n  if (!is4.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  return Object.entries(input).filter(([, value]) => includeOnly ? typeof value === `${includeOnly}` : true).map(([key, value]) => ({\n    [key]: value\n  }));\n}\nfunction omit(input, ...filter) {\n  if (!is4.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  const output = {};\n  for (const key in input) {\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (!filter.includes(key)) {\n        output[key] = input[key];\n      }\n    }\n  }\n  return output;\n}\nfunction pick(input, ...filter) {\n  if (!is4.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  if (!filter.length) {\n    return input;\n  }\n  const output = {};\n  for (const key in input) {\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (filter.includes(key)) {\n        output[key] = input[key];\n      }\n    }\n  }\n  return output;\n}\nfunction queryStringFormat(input, options = {}) {\n  const {\n    addPrefix = false,\n    encoder = encodeURIComponent,\n    encodeValuesOnly = true\n  } = options;\n  if (!is4.plainObject(input)) {\n    throw new TypeError(\"input type isn't supported\");\n  }\n  const isValidInput = Object.values(input).every(item => {\n    if (is4.array(item)) {\n      return item.every(d => is4.string(d) || is4.number(d));\n    }\n    return is4.string(item);\n  });\n  if (!isValidInput) {\n    throw new TypeError(\"input format isn't supported\");\n  }\n  const output = Object.entries(input).map(([key, value]) => {\n    const nextKey = encodeValuesOnly ? key : encoder(key);\n    const nextValue = is4.array(value) ? value.map(encoder).join(\",\") : encoder(`${value}`);\n    return `${nextKey}=${nextValue}`;\n  }).join(\"&\");\n  return `${addPrefix ? \"?\" : \"\"}${output}`;\n}\nfunction queryStringParse(input) {\n  let search = input;\n  if (input.slice(0, 1) === \"?\") {\n    search = input.slice(1);\n  }\n  return search.split(\"&\").reduce((acc, d) => {\n    const [key, value] = d.split(\"=\");\n    acc[decodeURIComponent(key)] = decodeURIComponent(value);\n    return acc;\n  }, {});\n}\nfunction sortObjectKeys(input) {\n  return objectKeys(input).sort().reduce((acc, key) => {\n    acc[key] = input[key];\n    return acc;\n  }, {});\n}\n\n// src/statistics.ts\nimport is5 from \"is-lite\";\nfunction mean(input, precision) {\n  const output = input.reduce((sum, value) => sum + value, 0) / input.length;\n  if (is5.number(precision)) {\n    return round(output, precision);\n  }\n  return output;\n}\nfunction median(input) {\n  const sorted = [...input].sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n  return sorted[middle];\n}\nfunction mode(input) {\n  const count = /* @__PURE__ */new Map();\n  for (const value of input) {\n    const current = count.get(value) ?? 0;\n    count.set(value, current + 1);\n  }\n  const sorted = [...count.entries()].sort((a, b) => b[1] - a[1]);\n  return sorted[0][0];\n}\n\n// src/validators.ts\nfunction isValidCPF(value) {\n  if (!value) {\n    return false;\n  }\n  const newValue = value.replace(/[.-]/g, \"\");\n  let sum = 0;\n  let rest;\n  if (/^(\\d)\\1+$/.test(newValue)) {\n    return false;\n  }\n  for (let index = 1; index <= 9; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (11 - index);\n  }\n  rest = sum * 10 % 11;\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n  if (rest !== parseInt(newValue.substring(9, 10), 10)) {\n    return false;\n  }\n  sum = 0;\n  for (let index = 1; index <= 10; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (12 - index);\n  }\n  rest = sum * 10 % 11;\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n  return rest === parseInt(newValue.substring(10, 11), 10);\n}\nfunction isValidEmail(value) {\n  return /^[\\w%+.-]+@[\\d.a-z-]+\\.[a-z]{2,}$/i.test(value);\n}\nfunction validatePassword(password, options) {\n  const {\n    maxLength = 64,\n    maxLengthMessage = \"Password must be a maximum of 64 characters\",\n    minLength = 6,\n    minLengthMessage = \"Password must be at least 6 characters long\",\n    regex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!#$%&*?@^]).*$/,\n    requiredCharactersMessage = \"Password must have at least 1 number, 1 lowercase, 1 uppercase and 1 special character\"\n  } = options || {};\n  if (password.length < minLength) {\n    throw new Error(minLengthMessage);\n  }\n  if (password.length > maxLength) {\n    throw new Error(maxLengthMessage);\n  }\n  if (!regex.test(password)) {\n    throw new Error(requiredCharactersMessage);\n  }\n  return true;\n}\n\n// src/types.ts\nvar types_exports = {};\nexport { ASYNC_STATUS, DAY, HOUR, MINUTE, MONTH, types_exports as Types, WEEK, YEAR, canUseDOM, capitalize, ceil, clamp, cleanUpObject, cleanupHTML, cleanupNumericString, cleanupURI, conditional, copyToClipboard, cors, createArray, debounce, demethodize, floor, formatBoolean, formatCPF, formatDateLocale, formatMoney, formatPhoneBR, formatPhoneUS, formatPostalCodeBR, getDataType, getInitials, getNestedProperty, getRandomItem, invariant, invertKeys, isDarkMode, isIsoDate, isJSON, isRequired, isTouchDevice, isValidCPF, isValidDate, isValidEmail, isoDate, keyMirror, logger, mean, measureExecutionTime, median, mergeProps, mode, noop, now, nullify, objectEntries, objectKeys, objectToArray, off, omit, on, once, pad, percentage, pick, pipe, pluralize, poll, popupCenter, prefersReducedMotion, px, queryStringFormat, queryStringParse, quickSort, randomNumber, removeAccents, removeDuplicates, removeEmojis, removeEmptyTags, removeNonPrintableCharacters, removeTags, removeWhitespace, request, round, shuffle, sleep, slugify, sortByLocaleCompare, sortByPrimitive, sortComparator, sortObjectKeys, splitIntoChunks, timeSince, timestamp, unique, uuid, validatePassword };","map":{"version":3,"names":["createArray","size","start","Array","from","length","_","index","getRandomItem","input","Math","floor","random","quickSort","comparator","sortComparator","output","recursiveSort","end","pivotValue","splitIndex","sort","temp","removeDuplicates","Set","shuffle","currentIndex","randomIndex","temporaryValue","sortByLocaleCompare","key","options","descending","compareOptions","left","right","toLowerCase","localeCompare","sortByPrimitive","firstComparator","secondComparator","splitIntoChunks","chunkSize","isArray","TypeError","chunks","ceil","push","slice","is","ASYNC_STATUS","IDLE","PENDING","SUCCESS","ERROR","cors","data","statusCodeOrOptions","allowCredentials","allowedHeaders","methods","origin","responseHeaders","statusCode","number","allowMethods","allowHeaders","exposedHeaders","Object","keys","join","body","JSON","stringify","headers","poll","condition","delay","maxRetries","retries","sleep","Error","request","url","method","params","Accept","plainObject","fetch","then","response","text","content","parse","status","error","statusText","seconds","Promise","resolve","setTimeout","is2","capitalize","charAt","toLocaleUpperCase","toLocaleLowerCase","cleanupHTML","removeWhitespace","removeEmptyTags","cleanupNumericString","value","replace","cleanupURI","getInitials","names","trim","split","pluralize","quantity","singular","plural","removeAccents","removalMap","A","AA","AE","AO","AU","AV","AY","B","C","D","DZ","Dz","E","F","G","H","I","J","K","L","LJ","Lj","M","N","NJ","Nj","O","OI","OO","OU","P","Q","R","S","T","TZ","U","V","VY","W","X","Y","Z","a","aa","ae","ao","au","av","ay","b","c","d","dz","e","f","g","h","hv","i","j","k","l","lj","m","n","nj","o","oi","ou","oo","p","q","r","s","t","tz","u","v","vy","w","x","y","z","parsedString","entries","forEach","removeEmojis","baseEmojiRegex","variationSelectorRegex","modifierRegex","zeroWidthJoinerRegex","emojiRegex","RegExp","source","removeNonPrintableCharacters","removeTags","slugify","MINUTE","HOUR","DAY","WEEK","MONTH","YEAR","isIsoDate","test","date","Date","toISOString","isoDate","isValidDate","Number","isNaN","getTime","now","timeSince","day","days","hour","hours","minute","minutes","month","months","prefix","second","skipWeeks","suffix","week","weeks","year","years","timestamp","diff","caption","result","isDarkMode","window","matchMedia","matches","isTouchDevice","prefersReducedMotion","formatBoolean","formatCPF","clearValue","formatDateLocale","locale","showTime","formatOptions","toLocaleDateString","formatMoney","decimalChar","showCents","symbol","thousandsChar","isNegative","abs","amount","cents","toFixed","padStart","initial","remain","formatted","formatPhoneBR","phone","formatPhoneUS","startsWith","formatPostalCodeBR","debounce","callback","timeout","parameters","clearTimeout","demethodize","fn","parameter","rest","apply","measureExecutionTime","performance","total","console","log","noop","once","done","Fn","arguments_","pipe","fns","reduce","previousValue","is3","digits","factor","clamp","min","max","pad","percentage","isFinite","round","randomNumber","canUseDOM","document","createElement","conditional","cases","defaultCase","expression","copyToClipboard","navigator","clipboard","writeText","getDataType","dataTypeName","prototype","toString","call","invariant","message","function","isJSON","isRequired","Constructable","logger","type","title","collapsed","hideTimestamp","skip","typeColor","groupMethod","groupCollapsed","group","parts","styles","time","getHours","getMinutes","getSeconds","groupEnd","nullify","on","target","addEventListener","off","removeEventListener","popupCenter","width","height","screen","screenLeft","screenTop","screenWidth","innerWidth","screenHeight","innerHeight","documentElement","clientWidth","clientHeight","top","popup","open","focus","px","numericString","unique","includeLowercase","includeNumbers","includeSymbols","includeUppercase","lowercase","uppercase","numbers","symbols","characters","uuid","is4","cleanUpObject","getNestedProperty","path","array","segments","currentSegment","remainingSegments","map","invertKeys","keyMirror","hasOwnProperty","mergeProps","defaultProps","props","cleanProps","objectEntries","objectKeys","objectToArray","includeOnly","filter","omit","includes","pick","queryStringFormat","addPrefix","encoder","encodeURIComponent","encodeValuesOnly","isValidInput","values","every","item","string","nextKey","nextValue","queryStringParse","search","acc","decodeURIComponent","sortObjectKeys","is5","mean","precision","sum","median","sorted","middle","mode","count","Map","current","get","set","isValidCPF","newValue","parseInt","substring","isValidEmail","validatePassword","password","maxLength","maxLengthMessage","minLength","minLengthMessage","regex","requiredCharactersMessage","types_exports"],"sources":["/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/arrays.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/async.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/date.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/strings.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/devices.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/formatters.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/functions.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/misc.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/numbers.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/objects.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/statistics.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/validators.ts","/Users/jaitrasaketh/Documents/Development/Multi Object Tracking/ACT-GUI/track-vision/frontend/node_modules/@gilbarbara/helpers/src/types.ts"],"sourcesContent":["import { PlainObject } from '@gilbarbara/types';\n\nimport { SortFunction } from './types';\n\n/**\n * Create a sequential array of numbers\n */\nexport function createArray(size: number, start = 1) {\n  return Array.from({ length: size }, (_, index) => index + start);\n}\n\n/**\n * Get a random item from an array\n */\nexport function getRandomItem<T>(input: T[]) {\n  return input[Math.floor(Math.random() * input.length)];\n}\n\n/**\n * Sort an array of numbers using a quick sort algorithm\n */\nexport function quickSort<T extends string | number>(input: T[], comparator = sortComparator): T[] {\n  // Create a sortable array to return.\n  const output = [...input];\n\n  // Recursively sort sub-arrays.\n  const recursiveSort = (start: number, end: number) => {\n    // If this sub-array is empty, it's sorted.\n    if (end - start < 1) {\n      return;\n    }\n\n    const pivotValue = output[end];\n    let splitIndex = start;\n\n    for (let index = start; index < end; index++) {\n      const sort = comparator(output[index], pivotValue);\n\n      // This value is less than the pivot value.\n      if (sort === -1) {\n        // If the element just to the right of the split index,\n        //   isn't this element, swap them.\n        if (splitIndex !== index) {\n          const temp = output[splitIndex];\n\n          output[splitIndex] = output[index];\n          output[index] = temp;\n        }\n\n        // Move the split index to the right by one,\n        //   denoting an increase in the less-than sub-array size.\n        splitIndex++;\n      }\n\n      // Leave values that are greater than or equal to\n      //   the pivot value where they are.\n    }\n\n    // Move the pivot value to between the split.\n    output[end] = output[splitIndex];\n    output[splitIndex] = pivotValue;\n\n    // Recursively sort the less-than and greater-than arrays.\n    recursiveSort(start, splitIndex - 1);\n    recursiveSort(splitIndex + 1, end);\n  };\n\n  // Sort the entire array.\n  recursiveSort(0, input.length - 1);\n\n  return output;\n}\n\n/**\n * Remove duplicates from the array\n */\nexport function removeDuplicates<T = unknown>(input: T[]): T[] {\n  return [...new Set(input)];\n}\n\n/**\n * Shuffle an array using the Fisher-Yates algorithm\n */\nexport function shuffle<T = unknown>(input: T[]) {\n  let currentIndex = input.length;\n  let randomIndex;\n  let temporaryValue;\n  const output = [...input];\n\n  while (currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex--);\n    temporaryValue = output[currentIndex];\n    output[currentIndex] = output[randomIndex];\n    output[randomIndex] = temporaryValue;\n  }\n\n  return output;\n}\n\n/**\n * Sort an array with localeCompare\n */\nexport function sortByLocaleCompare(\n  key?: string,\n  options: Intl.CollatorOptions & { descending?: boolean } = {},\n): SortFunction {\n  const { descending, ...compareOptions } = options;\n\n  if (key) {\n    if (descending) {\n      return <T extends PlainObject<any>>(left: PlainObject<T>, right: PlainObject<T>) =>\n        right[key].toLowerCase().localeCompare(left[key].toLowerCase(), undefined, compareOptions);\n    }\n\n    return <T extends PlainObject<any>>(left: PlainObject<T>, right: PlainObject<T>) =>\n      left[key].toLowerCase().localeCompare(right[key].toLowerCase(), undefined, compareOptions);\n  }\n\n  if (descending) {\n    return <T extends string>(left: T, right: T) =>\n      right.toLowerCase().localeCompare(left.toLowerCase(), undefined, compareOptions);\n  }\n\n  return <T extends string>(left: T, right: T) =>\n    left.toLowerCase().localeCompare(right.toLowerCase(), undefined, compareOptions);\n}\n\n/**\n * Sort an array by primitive values\n */\nexport function sortByPrimitive<T extends number | boolean>(\n  key?: string,\n  descending = false,\n): SortFunction {\n  const firstComparator = descending ? 1 : -1;\n  const secondComparator = descending ? -1 : 1;\n\n  if (key) {\n    return <P extends PlainObject<any>>(left: PlainObject<P>, right: PlainObject<P>) => {\n      if (left[key] === right[key]) {\n        return 0;\n      }\n\n      return left[key] < right[key] ? firstComparator : secondComparator;\n    };\n  }\n\n  return <P extends T>(left: P, right: P) => {\n    if (left === right) {\n      return 0;\n    }\n\n    return left < right ? firstComparator : secondComparator;\n  };\n}\n\n/**\n * Basic sort comparator\n */\nexport function sortComparator(left: string | number, right: string | number) {\n  if (left < right) {\n    return -1;\n  }\n\n  if (left > right) {\n    return 1;\n  }\n\n  return 0;\n}\n\nexport function splitIntoChunks<T>(input: T[], chunkSize: number = 25): T[][] {\n  if (!Array.isArray(input)) {\n    throw new TypeError('expected an array for the first argument');\n  }\n\n  const chunks: T[][] = [];\n\n  for (let index = 0; index < Math.ceil(input.length / chunkSize); index++) {\n    chunks.push(input.slice(index * chunkSize, (index + 1) * chunkSize));\n  }\n\n  return chunks;\n}\n","import is from 'is-lite';\n\nimport { CorsOptions, PollOptions, RequestError, RequestOptions } from './types';\n\nexport const ASYNC_STATUS = {\n  IDLE: 'IDLE',\n  PENDING: 'PENDING',\n  SUCCESS: 'SUCCESS',\n  ERROR: 'ERROR',\n} as const;\n\n/**\n * Format a CORS response\n */\nexport function cors(data: any, statusCodeOrOptions: number | CorsOptions = 200) {\n  const {\n    allowCredentials = true,\n    allowedHeaders = [],\n    methods = ['GET'],\n    origin = '*',\n    responseHeaders = undefined,\n    statusCode = 200,\n  } = is.number(statusCodeOrOptions) ? { statusCode: statusCodeOrOptions } : statusCodeOrOptions;\n\n  const allowMethods = [...methods, 'OPTIONS'];\n  const allowHeaders = [\n    ...new Set([\n      'Accept-Version',\n      'Accept',\n      'Authorization',\n      'Content-Length',\n      'Content-MD5',\n      'Content-Type',\n      'Date',\n      'x-amz-date',\n      'x-amz-security-token',\n      'X-Api-Version',\n      'X-CSRF-Token',\n      'X-Requested-With',\n      ...allowedHeaders,\n    ]),\n  ];\n  let exposedHeaders;\n\n  if (responseHeaders) {\n    exposedHeaders = {\n      'Access-Control-Expose-Headers': Object.keys(responseHeaders).join(','),\n      ...responseHeaders,\n    };\n  }\n\n  return {\n    body: JSON.stringify(data),\n    headers: {\n      'Access-Control-Allow-Origin': origin,\n      'Access-Control-Allow-Credentials': allowCredentials,\n      'Access-Control-Allow-Methods': allowMethods.join(','),\n      'Access-Control-Allow-Headers': allowHeaders.join(','),\n      ...exposedHeaders,\n    },\n    statusCode,\n  };\n}\n\n/**\n *\n * @param condition\n * @param options\n */\nexport async function poll(condition: () => boolean, options: PollOptions = {}): Promise<void> {\n  const { delay = 1, maxRetries = 5 } = options;\n  let retries = 0;\n\n  while (!condition() && retries <= maxRetries) {\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(delay);\n    retries++;\n  }\n\n  if (retries >= maxRetries) {\n    throw new Error('Timeout');\n  }\n}\n\n/**\n * Make async requests\n */\nexport async function request<D = any>(url: string, options: RequestOptions = {}): Promise<D> {\n  const { body, headers, method = 'GET' }: RequestOptions = options;\n\n  if (!url) {\n    throw new Error('URL is required');\n  }\n\n  const params: RequestOptions = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    method,\n  };\n\n  if (body) {\n    params.body = is.plainObject(body) ? JSON.stringify(body) : body;\n  }\n\n  return fetch(url, params).then(async response => {\n    const text = await response.text();\n    let content: any;\n\n    try {\n      content = JSON.parse(text);\n    } catch {\n      content = text;\n    }\n\n    if (response.status > 299) {\n      const error = new Error(response.statusText) as RequestError;\n\n      error.status = response.status;\n      error.response = content;\n\n      throw error;\n    } else {\n      return content;\n    }\n  });\n}\n\n/**\n * Block execution\n */\nexport function sleep(seconds = 1) {\n  return new Promise(resolve => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\n","import is from 'is-lite';\n\nimport { pluralize } from './strings';\nimport { TimeSinceOptions } from './types';\n\nexport const MINUTE = 60;\nexport const HOUR = MINUTE * 60;\nexport const DAY = HOUR * 24;\nexport const WEEK = DAY * 7;\nexport const MONTH = DAY * 30;\nexport const YEAR = 365 * DAY;\n\nexport function isIsoDate(input: string) {\n  if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(input)) {\n    return false;\n  }\n\n  const date = new Date(input);\n\n  return date.toISOString() === input;\n}\n\n/**\n * Check if the input is a valid date.\n */\nexport function isoDate(input?: string | number) {\n  if (typeof input !== 'undefined') {\n    return new Date(input).toISOString();\n  }\n\n  return new Date().toISOString();\n}\n\n/**\n * Check if the input is a valid date.\n */\nexport function isValidDate(input: string | number | Date) {\n  const date = is.date(input) ? input : new Date(input);\n\n  return !Number.isNaN(date.getTime());\n}\n\n/**\n * Returns the unixtime (in seconds).\n */\nexport function now() {\n  return Math.floor(Date.now() / 1000);\n}\n\n/**\n * Returns how much time has passed since the input.\n */\nexport function timeSince(input: Date | string | number, options?: TimeSinceOptions) {\n  const {\n    day = 'day',\n    days,\n    hour = 'hour',\n    hours,\n    minute = 'minute',\n    minutes,\n    month = 'month',\n    months,\n    prefix,\n    second = 'second',\n    seconds,\n    skipWeeks = false,\n    suffix = 'ago',\n    week = 'week',\n    weeks,\n    year = 'year',\n    years,\n  } = options || {};\n  const date = typeof input === 'number' ? input : timestamp(input);\n  const diff = now() - date;\n  let quantity = Math.floor(diff / YEAR);\n\n  const output = (value: number, caption: string) => {\n    let result = `${value} ${caption}`;\n\n    if (prefix) {\n      result = `${prefix} ${result}`;\n    }\n\n    if (suffix) {\n      result = `${result} ${suffix}`;\n    }\n\n    return result;\n  };\n\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, year, years));\n  }\n\n  quantity = Math.floor(diff / MONTH);\n\n  if (quantity > 1) {\n    return output(quantity, pluralize(quantity, month, months));\n  }\n\n  if (!skipWeeks) {\n    quantity = Math.floor(diff / WEEK);\n\n    if (quantity > 1) {\n      return output(quantity, pluralize(quantity, week, weeks));\n    }\n  }\n\n  quantity = Math.floor(diff / DAY);\n\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, day, days));\n  }\n\n  quantity = Math.floor(diff / HOUR);\n\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, hour, hours));\n  }\n\n  quantity = Math.floor(diff / MINUTE);\n\n  if (quantity > 1) {\n    return output(quantity, pluralize(quantity, minute, minutes));\n  }\n\n  return output(Math.floor(diff), pluralize(diff, second, seconds));\n}\n\n/**\n * Get the timestamp (in seconds) for a date.\n */\nexport function timestamp(input?: Date | string) {\n  if (!input) {\n    return now();\n  }\n\n  const date = typeof input === 'string' ? new Date(input) : input;\n\n  return Math.floor(date.getTime() / 1000);\n}\n","/**\n * Capitalize the first letter\n */\nexport function capitalize(input: string) {\n  return input.charAt(0).toLocaleUpperCase() + input.slice(1).toLocaleLowerCase();\n}\n\n/**\n * Cleanup HTML content\n */\nexport function cleanupHTML(input: string) {\n  return removeWhitespace(removeEmptyTags(input));\n}\n\n/**\n * Cleanup a numeric string\n */\nexport function cleanupNumericString(value = '') {\n  return value.replace(/\\D+/g, '');\n}\n\n/**\n * Cleanup URI characters\n */\nexport function cleanupURI(input: string) {\n  return input.replace(/[$&+,/:;=?@]/g, '');\n}\n\n/**\n * Get initials from name\n */\nexport function getInitials(input: string) {\n  if (!input) {\n    return '';\n  }\n\n  const names = input.trim().split(' ');\n\n  if (names.length === 1) {\n    return `${names[0].charAt(0)}`;\n  }\n\n  return `${names[0].charAt(0)}${names[names.length - 1].charAt(0)}`;\n}\n\n/**\n * Pluralize strings.\n *\n * If the plural form just adds an `s` to the end, you don't need to pass it.\n */\nexport function pluralize(quantity: number, singular: string, plural?: string) {\n  if (quantity === 1) {\n    return singular;\n  }\n\n  return plural || `${singular}s`;\n}\n\n/**\n * Remove accents\n */\nexport function removeAccents(input: string) {\n  const removalMap = {\n    A: /[AÀÁÂÃÄÅĀĂĄǍǞǠǺȀȂȦḀẠẢẤẦẨẪẬẮẰẲẴẶⒶＡ]/g,\n    AA: /Ꜳ/g,\n    AE: /[ÆǢǼ]/g,\n    AO: /Ꜵ/g,\n    AU: /Ꜷ/g,\n    AV: /[ꜸꜺ]/g,\n    AY: /Ꜽ/g,\n    B: /[BƁƂɃḂḄḆⒷＢ]/g,\n    C: /[CÇĆĈĊČƇȻḈⒸꜾＣ]/g,\n    D: /[DĎĐƉƊƋḊḌḎḐḒⒹꝹＤ]/g,\n    DZ: /[ǄǱ]/g,\n    Dz: /[ǅǲ]/g,\n    E: /[EÈÉÊËĒĔĖĘĚƎƐȄȆȨḔḖḘḚḜẸẺẼẾỀỂỄỆⒺＥ]/g,\n    F: /[FƑḞⒻꝻＦ]/g,\n    G: /[GĜĞĠĢƓǤǦǴḠⒼꝽꝾꞠＧ]/g,\n    H: /[HĤĦȞḢḤḦḨḪⒽⱧⱵꞍＨ]/g,\n    I: /[IÌÍÎÏĨĪĬĮİƗǏȈȊḬḮỈỊⒾＩ]/g,\n    J: /[JĴɈⒿＪ]/g,\n    K: /[KĶƘǨḰḲḴⓀⱩꝀꝂꝄꞢＫ]/g,\n    L: /[LĹĻĽĿŁȽḶḸḺḼⓁⱠⱢꝆꝈꞀＬ]/g,\n    LJ: /Ǉ/g,\n    Lj: /ǈ/g,\n    M: /[MƜḾṀṂⓂⱮＭ]/g,\n    N: /[NÑŃŅŇƝǸȠṄṆṈṊⓃꞐꞤＮ]/g,\n    NJ: /Ǌ/g,\n    Nj: /ǋ/g,\n    O: /[OÒÓÔÕÖØŌŎŐƆƟƠǑǪǬǾȌȎȪȬȮȰṌṎṐṒỌỎỐỒỔỖỘỚỜỞỠỢⓄꝊꝌＯ]/g,\n    OI: /Ƣ/g,\n    OO: /Ꝏ/g,\n    OU: /Ȣ/g,\n    P: /[PƤṔṖⓅⱣꝐꝒꝔＰ]/g,\n    Q: /[QɊⓆꝖꝘＱ]/g,\n    R: /[RŔŖŘȐȒɌṘṚṜṞⓇⱤꝚꞂꞦＲ]/g,\n    S: /[SŚŜŞŠȘṠṢṤṦṨẞⓈⱾꞄꞨＳ]/g,\n    T: /[TŢŤŦƬƮȚȾṪṬṮṰⓉꞆＴ]/g,\n    TZ: /Ꜩ/g,\n    U: /[UÙÚÛÜŨŪŬŮŰŲƯǓǕǗǙǛȔȖɄṲṴṶṸṺỤỦỨỪỬỮỰⓊＵ]/g,\n    V: /[VƲɅṼṾⓋꝞＶ]/g,\n    VY: /Ꝡ/g,\n    W: /[WŴẀẂẄẆẈⓌⱲＷ]/g,\n    X: /[XẊẌⓍＸ]/g,\n    Y: /[YÝŶŸƳȲɎẎỲỴỶỸỾⓎＹ]/g,\n    Z: /[ZŹŻŽƵȤẐẒẔⓏⱫⱿꝢＺ]/g,\n    a: /[aàáâãäåāăąǎǟǡǻȁȃȧɐḁẚạảấầẩẫậắằẳẵặⓐⱥａ]/g,\n    aa: /ꜳ/g,\n    ae: /[æǣǽ]/g,\n    ao: /ꜵ/g,\n    au: /ꜷ/g,\n    av: /[ꜹꜻ]/g,\n    ay: /ꜽ/g,\n    b: /[bƀƃɓḃḅḇⓑｂ]/g,\n    c: /[cçćĉċčƈȼḉↄⓒꜿｃ]/g,\n    d: /[dďđƌɖɗḋḍḏḑḓⓓꝺｄ]/g,\n    dz: /[ǆǳ]/g,\n    e: /[eèéêëēĕėęěǝȅȇȩɇɛḕḗḙḛḝẹẻẽếềểễệⓔｅ]/g,\n    f: /[fƒḟⓕꝼｆ]/g,\n    g: /[gĝğġģǥǧǵɠᵹḡⓖꝿꞡｇ]/g,\n    h: /[hĥħȟɥḣḥḧḩḫẖⓗⱨⱶｈ]/g,\n    hv: /ƕ/g,\n    i: /[iìíîïĩīĭįıǐȉȋɨḭḯỉịⓘｉ]/g,\n    j: /[jĵǰɉⓙｊ]/g,\n    k: /[kķƙǩḱḳḵⓚⱪꝁꝃꝅꞣｋ]/g,\n    l: /[lĺļľŀłſƚɫḷḹḻḽⓛⱡꝇꝉꞁｌ]/g,\n    lj: /ǉ/g,\n    m: /[mɯɱḿṁṃⓜｍ]/g,\n    n: /[nñńņňŉƞǹɲṅṇṉṋⓝꞑꞥｎ]/g,\n    nj: /ǌ/g,\n    o: /[oòóôõöøōŏőơǒǫǭǿȍȏȫȭȯȱɔɵṍṏṑṓọỏốồổỗộớờởỡợⓞꝋꝍｏ]/g,\n    oi: /ƣ/g,\n    ou: /ȣ/g,\n    oo: /ꝏ/g,\n    p: /[pƥᵽṕṗⓟꝑꝓꝕｐ]/g,\n    q: /[qɋⓠꝗꝙｑ]/g,\n    r: /[rŕŗřȑȓɍɽṙṛṝṟⓡꝛꞃꞧｒ]/g,\n    s: /[sßśŝşšșȿṡṣṥṧṩẛⓢꞅꞩｓ]/g,\n    t: /[tţťŧƭțʈṫṭṯṱẗⓣⱦꞇｔ]/g,\n    tz: /ꜩ/g,\n    u: /[uùúûüũūŭůűųưǔǖǘǚǜȕȗʉṳṵṷṹṻụủứừửữựⓤｕ]/g,\n    v: /[vʋʌṽṿⓥꝟｖ]/g,\n    vy: /ꝡ/g,\n    w: /[wŵẁẃẅẇẉẘⓦⱳｗ]/g,\n    x: /[xẋẍⓧｘ]/g,\n    y: /[yýÿŷƴȳɏẏẙỳỵỷỹỿⓨｙ]/g,\n    z: /[zźżžƶȥɀẑẓẕⓩⱬꝣｚ]/g,\n  };\n  let parsedString = input;\n\n  Object.entries(removalMap).forEach(([key, value]) => {\n    parsedString = parsedString.replace(value, key);\n  });\n\n  return parsedString;\n}\n\n/**\n * Remove emojis\n */\nexport function removeEmojis(input: string) {\n  const baseEmojiRegex = /[\\u2700-\\u27bf]|\\ud83c[\\udde6-\\uddff]{2}|[\\ud800-\\udbff][\\udc00-\\udfff]/;\n  const variationSelectorRegex = /[\\ufe0e\\ufe0f]?/;\n  const modifierRegex = /[\\u0300-\\u036f\\u20d0-\\u20f0\\ufe20-\\ufe23]|\\ud83c[\\udffb-\\udfff]/;\n  const zeroWidthJoinerRegex =\n    /\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\u20d0-\\u20f0\\ufe20-\\ufe23]|\\ud83c[\\udffb-\\udfff])?/;\n  const emojiRegex = new RegExp(\n    `(?:${baseEmojiRegex.source})${variationSelectorRegex.source}(?:${modifierRegex.source})?(?:${zeroWidthJoinerRegex.source})*`,\n    'g',\n  );\n\n  return input.replace(emojiRegex, '').trim();\n}\n\n/**\n * Remove empty HTML Tags (including whitespace)\n */\nexport function removeEmptyTags(input: string) {\n  return input.replace(/<[^/>][^>]*>\\s*<\\/[^>]+>/gi, '');\n}\n\n/**\n * Remove non-printable ASCII characters\n */\nexport function removeNonPrintableCharacters(input: string) {\n  return input.replace(/[^\\x20-\\x7E´\\u00C0-\\u00FFˆ˜]+/g, '');\n}\n\n/**\n * Remove HTML tags\n */\nexport function removeTags(input: string) {\n  return input.replace(/(<([^>]+)>)/gi, '');\n}\n\n/**\n * Remove whitespace\n */\nexport function removeWhitespace(input: string) {\n  return input.replace(/\\r\\n|\\r|\\n|\\t/g, '').replace(/ +/g, ' ');\n}\n\n/**\n * Format string to slug\n */\nexport function slugify(input: string) {\n  return removeAccents(input)\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[()]/g, '')\n    .replace(/ /g, '-')\n    .replace(/[\"%<>\\\\^`{|}]/g, '')\n    .toLowerCase();\n}\n","/**\n * Detect if the device is in dark mode\n */\nexport function isDarkMode() {\n  return !!window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n}\n\n/**\n * Detect if the device supports touch events\n */\nexport function isTouchDevice() {\n  return !!window.matchMedia && window.matchMedia('(pointer: coarse)').matches;\n}\n\n/**\n * Detect if the user prefers reduced motion\n */\nexport function prefersReducedMotion() {\n  return !!window.matchMedia && window.matchMedia('prefers-reduced-motion').matches;\n}\n","import { cleanupNumericString } from './strings';\nimport { FormatDateLocaleOptions, FormatMoneyOptions } from './types';\n\n/**\n * Format boolean into a Yes/No string\n */\nexport function formatBoolean(input: boolean) {\n  return input ? 'Yes' : 'No';\n}\n\n/**\n * Format string into a CPF\n */\nexport function formatCPF(value: string) {\n  const clearValue = cleanupNumericString(value);\n\n  if (clearValue.length >= 10) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(\n      6,\n      9,\n    )}-${clearValue.slice(9, 11)}`;\n  } else if (clearValue.length >= 7) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(6, 9)}`;\n  } else if (clearValue.length >= 4) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}`;\n  }\n\n  return clearValue;\n}\n\n/**\n * Format date ISO string using locale\n */\nexport function formatDateLocale(input: string, options: FormatDateLocaleOptions = {}) {\n  const { locale = 'en-GB', showTime = false } = options;\n\n  const formatOptions: Intl.DateTimeFormatOptions = {\n    year: '2-digit',\n    month: '2-digit',\n    day: '2-digit',\n  };\n\n  if (showTime) {\n    formatOptions.hour = '2-digit';\n    formatOptions.minute = '2-digit';\n  }\n\n  return new Date(input).toLocaleDateString(locale, formatOptions);\n}\n\n/**\n * Format number into money string\n */\nexport function formatMoney(input: number, options: FormatMoneyOptions = {}) {\n  const { decimalChar = '.', showCents = false, symbol = '$', thousandsChar = ',' } = options;\n\n  const isNegative = input < 0;\n  const value = Math.abs(input);\n  const [amount, cents] = value.toFixed(2).split('.');\n  const padStart = amount.length > 3 ? amount.length % 3 : 0;\n  const initial = amount.slice(0, padStart);\n  const remain = amount.slice(padStart).replace(/(\\d{3})(?=\\d)/g, `$1${thousandsChar}`);\n\n  let formatted = `${remain}`;\n\n  if (initial) {\n    formatted = `${initial}${thousandsChar}${remain}`;\n  }\n\n  if (cents !== '00' || showCents) {\n    formatted += `${decimalChar}${cents}`;\n  }\n\n  return `${isNegative ? '-' : ''}${symbol}${formatted}`;\n}\n\n/**\n * Format string into a brazilian phone\n */\nexport function formatPhoneBR(input: string) {\n  const phone = input.replace(/\\D/g, '');\n\n  if (phone.length === 8) {\n    return phone.replace(/^(\\d{4})(\\d{4}).*/, '$1-$2');\n  }\n\n  if (phone.length === 9) {\n    return phone.replace(/^(\\d{5})(\\d{4}).*/, '$1-$2');\n  }\n\n  if (phone.length === 10 || phone.length === 11) {\n    return phone.replace(/^(\\d{2})(\\d{4,5})(\\d{4}).*/, '($1) $2-$3');\n  }\n\n  return phone;\n}\n\n/**\n * Format string into a US phone\n */\nexport function formatPhoneUS(input: string) {\n  const phone = input.replace(/\\D/g, '');\n\n  if (phone.length === 10) {\n    return phone.replace(/^(\\d{3})(\\d{3})(\\d{4}).*/, '($1) $2-$3');\n  }\n\n  if (phone.length === 11 && phone.startsWith('1')) {\n    return phone.replace(/^1(\\d{3})(\\d{3})(\\d{4}).*/, '+1 ($1) $2-$3');\n  }\n\n  return phone;\n}\n\n/**\n * Format string into a zip code\n */\nexport function formatPostalCodeBR(value: string) {\n  const clearValue = cleanupNumericString(value);\n\n  if (clearValue.length >= 6) {\n    return `${clearValue.slice(0, 5)}-${clearValue.slice(5, 8)}`;\n  }\n\n  return clearValue;\n}\n","/**\n * Creates a debounced version of a callback function.\n *\n * The debounced function delays the execution of the callback until after the specified delay\n * has passed since the last time the debounced function was called. If the debounced function\n * is called again before the delay has passed, the timer resets.\n */\nexport function debounce(callback: (...parameters: any[]) => void, delay: number) {\n  let timeout: ReturnType<typeof setTimeout>;\n\n  return (...parameters: any[]) => {\n    // Clear any existing timer to reset the debounce delay\n    clearTimeout(timeout);\n\n    // Start a new timer to call the callback after the specified delay\n    timeout = setTimeout(() => callback(...parameters), delay);\n  };\n}\n\n/**\n * Decouple methods from objects\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport function demethodize(fn: Function) {\n  return (parameter: any, ...rest: any[]) => fn.apply(parameter, rest);\n}\n\n/**\n * Measure function execution time\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport async function measureExecutionTime<T = any>(callback: Function): Promise<T> {\n  const start = performance.now();\n\n  const result = await callback();\n\n  const end = performance.now();\n  const total = end - start;\n\n  // eslint-disable-next-line no-console\n  console.log(`Completed in ${Math.ceil(total)} milliseconds`);\n\n  return result as T;\n}\n\n/**\n * A function that does nothing.\n */\nexport function noop() {\n  return undefined;\n}\n\n/**\n * Creates a function that will only be called once.\n * Repeat calls return the value of the first invocation.\n */\nexport function once<T extends (...arguments_: Array<any>) => any>(fn: T): T {\n  let done = false;\n  let result: ReturnType<T>;\n\n  return function Fn(...arguments_: Parameters<T>): ReturnType<T> {\n    if (!done) {\n      done = true;\n      result = fn(...arguments_);\n    }\n\n    return result;\n  } as T;\n}\n\n/**\n * Combine multiple functions into one.\n * The output of each function is passed as the input to the next.\n */\nexport function pipe<T>(...fns: Array<(argument: T) => T>) {\n  return (input: T) => fns.reduce((previousValue, fn) => fn(previousValue), input);\n}\n","import { StringOrNumber } from '@gilbarbara/types';\nimport is from 'is-lite';\n\nimport { pad } from './numbers';\nimport { LoggerOptions, UniqueOptions } from './types';\n\ntype Case<T = void> = [boolean, () => T];\n\nexport function canUseDOM() {\n  return !!(typeof window !== 'undefined' && window.document?.createElement);\n}\n\nexport function conditional<TReturn = void>(\n  cases: Array<Case<TReturn>>,\n  defaultCase?: () => TReturn,\n) {\n  for (const [expression, callback] of cases) {\n    if (expression) {\n      return callback();\n    }\n  }\n\n  return defaultCase?.();\n}\n\n/**\n * Copy a string to the clipboard\n */\nexport async function copyToClipboard(input: string) {\n  try {\n    await navigator.clipboard.writeText(input);\n  } catch {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Get the data type of variable.\n */\nexport function getDataType(input: unknown, toLowerCase = false): string {\n  const dataTypeName = Object.prototype.toString.call(input).slice(8, -1);\n  let output = dataTypeName;\n\n  if (/HTML\\w+Element/.test(dataTypeName)) {\n    output = 'HTMLElement';\n  }\n\n  return toLowerCase ? output.toLowerCase() : output;\n}\n\nexport function invariant(condition: any, message: string | (() => string)): asserts condition {\n  if (condition) {\n    return;\n  }\n\n  const value = is.function(message) ? message() : message;\n\n  throw new Error(value);\n}\n\n/**\n * Check if a string is a valid JSON\n */\nexport function isJSON(input: string) {\n  try {\n    JSON.parse(input);\n  } catch {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Throw an error if the parameter isn't provided\n */\nexport function isRequired(input = 'parameter', Constructable = TypeError) {\n  throw new Constructable(`\"${input}\" is required`);\n}\n\n/**\n * Log grouped messages to the console\n */\nexport function logger(type: string, title: string, data: any, options: LoggerOptions = {}) {\n  /* eslint-disable no-console */\n  const { collapsed = true, hideTimestamp = false, skip = false, typeColor = 'gray' } = options;\n  const groupMethod = collapsed ? console.groupCollapsed : console.group;\n  const date = new Date();\n  const parts = [`%c ${type}`];\n  const styles = [`color: ${typeColor}; font-weight: lighter;`, 'color: inherit;'];\n\n  if (!hideTimestamp) {\n    styles.push('color: gray; font-weight: lighter;');\n  }\n\n  const time = `${pad(date.getHours(), 2)}:${pad(date.getMinutes(), 2)}:${pad(\n    date.getSeconds(),\n    2,\n  )}`;\n\n  parts.push(`%c${title}`);\n\n  if (!hideTimestamp) {\n    parts.push(`%c@ ${time}`);\n  }\n\n  if (!skip) {\n    groupMethod(parts.join(' '), ...styles);\n    console.log(data);\n    console.groupEnd();\n  }\n  /* eslint-enable */\n}\n\n/**\n * Returns the value or null\n */\nexport function nullify<T>(value: T) {\n  return value ?? null;\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-function-type */\n/**\n * Add the event listener to the target\n */\nexport function on<T extends Window | Document | HTMLElement | EventTarget>(\n  target: T | null,\n  ...rest: Parameters<T['addEventListener']> | [string, Function | null, ...any]\n): void {\n  if (target?.addEventListener) {\n    target.addEventListener(...(rest as Parameters<HTMLElement['addEventListener']>));\n  }\n}\n\n/**\n * Remove the event listener from the target\n */\nexport function off<T extends Window | Document | HTMLElement | EventTarget>(\n  target: T | null,\n  ...rest: Parameters<T['removeEventListener']> | [string, Function | null, ...any]\n): void {\n  if (target?.removeEventListener) {\n    target.removeEventListener(...(rest as Parameters<HTMLElement['removeEventListener']>));\n  }\n}\n/* eslint-enable @typescript-eslint/no-unsafe-function-type */\n\nexport function popupCenter(url: string, title: string, width: number, height: number) {\n  const { screen, screenLeft, screenTop } = window;\n  let screenWidth = window.innerWidth;\n  let screenHeight = window.innerHeight;\n\n  /* c8 ignore next 5 */\n  if (!screenWidth) {\n    screenWidth = document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n  }\n\n  /* c8 ignore next 5 */\n  if (!screenHeight) {\n    screenHeight = document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n  }\n\n  const left = screenWidth / 2 - width / 2 + screenLeft;\n  const top = screenHeight / 2 - height / 2 + screenTop;\n\n  const popup = window.open(\n    url,\n    title,\n    `menubar=no,location=no,resizable=no,scrollbars=yees,status=no,width=${width},height=${height},top=${top}, left=${left}`,\n  );\n\n  if (popup) {\n    popup.focus();\n  }\n\n  return popup;\n}\n\nexport function px(value: undefined): undefined;\nexport function px(value: StringOrNumber): string;\nexport function px(value: StringOrNumber | undefined): string | undefined;\n\n/**\n * Convert a number or numeric value to px\n *\n * Otherwise, return the value.\n */\nexport function px(value: StringOrNumber | undefined): string | undefined {\n  return is.number(value) || is.numericString(value) ? `${value}px` : value;\n}\n\n/**\n * Return a unique string\n */\nexport function unique(length = 8, options: UniqueOptions = {}): string {\n  const {\n    includeLowercase = true,\n    includeNumbers = true,\n    includeSymbols = false,\n    includeUppercase = true,\n  } = options;\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const numbers = '0123456789';\n  const symbols = '!?@#$%^&*+_-=:.~';\n\n  let characters = '';\n\n  if (includeLowercase) {\n    characters += lowercase;\n  }\n\n  if (includeUppercase) {\n    characters += uppercase;\n  }\n\n  if (includeNumbers) {\n    characters += numbers;\n  }\n\n  if (includeSymbols) {\n    characters += symbols;\n  }\n\n  let result = '';\n\n  for (let index = length; index > 0; --index) {\n    result += characters[Math.round(Math.random() * (characters.length - 1))];\n  }\n\n  return result;\n}\n\n/**\n * Returns an UUID v4 string.\n */\nexport function uuid() {\n  /* eslint-disable no-bitwise */\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n\n    return v.toString(16);\n  });\n  /* eslint-enable */\n}\n","/**\n * Ceil decimal numbers\n */\nexport function ceil(input: number, digits = 2) {\n  const factor = 10 ** digits;\n\n  return Math.ceil(input * factor) / factor;\n}\n\n/**\n * Limit number between range\n */\nexport function clamp(value: number, min = 0, max = 100) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Floor decimal numbers\n */\nexport function floor(input: number, digits = 2) {\n  const factor = 10 ** digits;\n\n  return Math.floor(input * factor) / factor;\n}\n\n/**\n * Pad a number with zeros\n */\nexport function pad(input: number, length = 2) {\n  return `${input}`.padStart(length, '0');\n}\n\n/**\n * Calculate the percentage of a number in relation to the total\n */\nexport function percentage(input: number, total: number, digits: number = 2) {\n  const result = (input / total) * 100;\n\n  return Number.isFinite(result) ? round(result, digits) : 0;\n}\n\n/**\n * Returns a random number\n */\nexport function randomNumber(min = 0, max = 10) {\n  if (min >= max) {\n    return max;\n  }\n\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Round decimal numbers\n */\nexport function round(input: number, digits = 2) {\n  const factor = 10 ** digits;\n\n  return Math.round(input * factor) / factor;\n}\n","import { NarrowPlainObject, PlainObject, RemoveType, Simplify } from '@gilbarbara/types';\nimport is from 'is-lite';\n\nimport { InvertKeyValue, QueryStringFormatOptions } from './types';\n\n/**\n * Remove properties with undefined value from an object\n */\nexport function cleanUpObject<T extends PlainObject>(input: T) {\n  const output: Record<string, unknown> = {};\n\n  for (const key in input) {\n    if (input[key] !== undefined) {\n      output[key] = input[key];\n    }\n  }\n\n  return output as RemoveType<T>;\n}\n\n/**\n * Get a nested property inside an object or array\n */\nexport function getNestedProperty<T extends PlainObject<any>>(input: T, path: string): any {\n  if ((!is.plainObject(input) && !is.array(input)) || !path) {\n    return input;\n  }\n\n  const segments = path.split('.');\n  const { length } = segments;\n  let output = input;\n\n  for (let index = 0; index < length; index++) {\n    const currentSegment = segments[index];\n    const remainingSegments = segments.slice(index + 1);\n\n    if (currentSegment === '+' && is.array(output) && remainingSegments.length === 1) {\n      return output.map(d => d[remainingSegments.join('.')]);\n    }\n\n    try {\n      output = output[currentSegment];\n    } catch {\n      // skip\n    }\n  }\n\n  return output;\n}\n\n/**\n * Invert object key and value\n */\nexport function invertKeys<const T extends PlainObject<PropertyKey>>(input: T) {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  const result: Record<PropertyKey, PropertyKey> = {};\n\n  for (const [key, value] of Object.entries(input)) {\n    result[value] = key;\n  }\n\n  return result as InvertKeyValue<T>;\n}\n\n/**\n * Set the key as the value\n */\nexport function keyMirror<T extends PlainObject>(input: T): { [K in keyof T]: K } {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  const output: any = {};\n\n  for (const key in input) {\n    if (!Object.prototype.hasOwnProperty.call(output, key)) {\n      output[key] = key;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Merges the defaultProps with literal values with the incoming props, removing undefined values from it that would override the defaultProps.\n * The result is a type-safe object with the defaultProps as required properties.\n */\nexport function mergeProps<TDefaultProps extends PlainObject<any>, TProps extends PlainObject<any>>(\n  defaultProps: TDefaultProps,\n  props: TProps,\n) {\n  const cleanProps = cleanUpObject(props);\n\n  return { ...defaultProps, ...cleanProps } as unknown as Simplify<\n    TProps & Required<Pick<TProps, keyof TDefaultProps & string>>\n  >;\n}\n\n/**\n * Type-safe Object.entries()\n */\nexport function objectEntries<T extends PlainObject<any>>(input: T) {\n  return Object.entries(input) as Array<{ [K in keyof T]-?: [K, T[K]] }[keyof T]>;\n}\n\n/**\n * Type-safe Object.keys()\n */\nexport function objectKeys<T extends PlainObject<any>>(input: T) {\n  return Object.keys(input) as Array<keyof T>;\n}\n\n/**\n * Convert an object to an array of objects\n */\nexport function objectToArray<T extends PlainObject>(input: T, includeOnly?: string) {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  return Object.entries(input)\n    .filter(([, value]) => (includeOnly ? typeof value === `${includeOnly}` : true)) // eslint-disable-line valid-typeof\n    .map(([key, value]) => ({ [key]: value }));\n}\n\n/**\n * Remove properties from an object\n */\nexport function omit<T extends Record<string, any>, K extends keyof T>(\n  input: NarrowPlainObject<T>,\n  ...filter: K[]\n) {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  const output: any = {};\n\n  for (const key in input) {\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (!filter.includes(key as unknown as K)) {\n        output[key] = input[key];\n      }\n    }\n  }\n\n  return output as Omit<T, K>;\n}\n\n/**\n * Select properties from an object\n */\nexport function pick<T extends Record<string, any>, K extends keyof T>(\n  input: NarrowPlainObject<T>,\n  ...filter: K[]\n) {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  if (!filter.length) {\n    return input;\n  }\n\n  const output: any = {};\n\n  for (const key in input) {\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (filter.includes(key as unknown as K)) {\n        output[key] = input[key];\n      }\n    }\n  }\n\n  return output as Pick<T, K>;\n}\n\n/**\n * Stringify a shallow object into a query string\n */\nexport function queryStringFormat<T extends PlainObject>(\n  input: T,\n  options: QueryStringFormatOptions = {},\n) {\n  const { addPrefix = false, encoder = encodeURIComponent, encodeValuesOnly = true } = options;\n\n  if (!is.plainObject(input)) {\n    throw new TypeError(\"input type isn't supported\");\n  }\n\n  const isValidInput = Object.values(input).every(item => {\n    if (is.array(item)) {\n      return item.every(d => is.string(d) || is.number(d));\n    }\n\n    return is.string(item);\n  });\n\n  if (!isValidInput) {\n    throw new TypeError(\"input format isn't supported\");\n  }\n\n  const output = Object.entries(input)\n    .map(([key, value]) => {\n      const nextKey = encodeValuesOnly ? key : encoder(key);\n      const nextValue = is.array(value) ? value.map(encoder).join(',') : encoder(`${value}`);\n\n      return `${nextKey}=${nextValue}`;\n    })\n    .join('&');\n\n  return `${addPrefix ? '?' : ''}${output}`;\n}\n\n/**\n * Parse a query string\n */\nexport function queryStringParse(input: string): PlainObject<string> {\n  let search = input;\n\n  if (input.slice(0, 1) === '?') {\n    search = input.slice(1);\n  }\n\n  return search.split('&').reduce<PlainObject<string>>((acc, d) => {\n    const [key, value] = d.split('=');\n\n    acc[decodeURIComponent(key)] = decodeURIComponent(value);\n\n    return acc;\n  }, {});\n}\n\n/**\n * Sort object keys\n */\nexport function sortObjectKeys<T extends PlainObject>(input: T) {\n  return objectKeys(input)\n    .sort()\n    .reduce((acc, key) => {\n      acc[key] = input[key];\n\n      return acc;\n    }, {} as T);\n}\n","import is from 'is-lite';\n\nimport { round } from './numbers';\n\n/**\n * Returns the average of two or more numbers\n */\nexport function mean(input: number[], precision?: number) {\n  const output = input.reduce((sum, value) => sum + value, 0) / input.length;\n\n  if (is.number(precision)) {\n    return round(output, precision);\n  }\n\n  return output;\n}\n\n/**\n * Returns the median of two or more numbers\n */\nexport function median(input: number[]) {\n  const sorted = [...input].sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n\n  return sorted[middle];\n}\n\n/**\n * Returns the mode of two or more numbers\n */\nexport function mode(input: number[]) {\n  const count = new Map<number, number>();\n\n  for (const value of input) {\n    const current = count.get(value) ?? 0;\n\n    count.set(value, current + 1);\n  }\n\n  const sorted = [...count.entries()].sort((a, b) => b[1] - a[1]);\n\n  return sorted[0][0];\n}\n","/**\n * Check if CPF is valid\n */\nimport { ValidatePasswordOptions } from './types';\n\nexport function isValidCPF(value: string) {\n  if (!value) {\n    return false;\n  }\n\n  const newValue = value.replace(/[.-]/g, '');\n  let sum = 0;\n  let rest: number;\n\n  if (/^(\\d)\\1+$/.test(newValue)) {\n    return false;\n  }\n\n  for (let index = 1; index <= 9; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (11 - index);\n  }\n\n  rest = (sum * 10) % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  if (rest !== parseInt(newValue.substring(9, 10), 10)) {\n    return false;\n  }\n\n  sum = 0;\n\n  for (let index = 1; index <= 10; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (12 - index);\n  }\n\n  rest = (sum * 10) % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  return rest === parseInt(newValue.substring(10, 11), 10);\n}\n\n/**\n * Check if email is valid\n */\nexport function isValidEmail(value: string) {\n  return /^[\\w%+.-]+@[\\d.a-z-]+\\.[a-z]{2,}$/i.test(value);\n}\n\n/**\n * Validate password length and required characters\n * @throws\n */\nexport function validatePassword(password: string, options?: ValidatePasswordOptions) {\n  const {\n    maxLength = 64,\n    maxLengthMessage = 'Password must be a maximum of 64 characters',\n    minLength = 6,\n    minLengthMessage = 'Password must be at least 6 characters long',\n    regex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!#$%&*?@^]).*$/,\n    requiredCharactersMessage = 'Password must have at least 1 number, 1 lowercase, 1 uppercase and 1 special character',\n  } = options || {};\n\n  if (password.length < minLength) {\n    throw new Error(minLengthMessage);\n  }\n\n  if (password.length > maxLength) {\n    throw new Error(maxLengthMessage);\n  }\n\n  if (!regex.test(password)) {\n    throw new Error(requiredCharactersMessage);\n  }\n\n  return true;\n}\n","import { HttpMethods, PlainObject } from '@gilbarbara/types';\n\nexport interface CorsOptions {\n  /** @default true */\n  allowCredentials?: boolean;\n  /** @default [] */\n  allowedHeaders?: string[];\n  /** @default ['GET'] */\n  methods?: HttpMethods[];\n  /** @default * */\n  origin?: string;\n  responseHeaders?: PlainObject<string>;\n  /** @default 200 */\n  statusCode?: number;\n}\n\nexport interface FormatDateLocaleOptions {\n  locale?: string;\n  showTime?: boolean;\n}\n\nexport interface FormatMoneyOptions {\n  decimalChar?: ',' | '.';\n  showCents?: boolean;\n  symbol?: string;\n  thousandsChar?: ',' | '.';\n}\n\nexport type InvertKeyValue<T extends Record<PropertyKey, PropertyKey>> = {\n  [K in T[keyof T]]: { [P in keyof T]: T[P] extends K ? P : never }[keyof T];\n};\n\nexport interface LoggerOptions {\n  collapsed?: boolean;\n  hideTimestamp?: boolean;\n  skip?: boolean;\n  typeColor?: string;\n}\n\nexport interface PollOptions {\n  delay?: number;\n  maxRetries?: number;\n}\n\nexport interface QueryStringFormatOptions {\n  addPrefix?: boolean;\n  encodeValuesOnly?: boolean;\n  encoder?: (uri: string) => string;\n}\n\nexport interface RequestOptions {\n  body?: any;\n  headers?: PlainObject<string>;\n  method?: HttpMethods;\n}\n\nexport interface RequestError extends Error {\n  response: any;\n  status: number;\n}\n\nexport interface SortFunction {\n  <T extends PlainObject = PlainObject>(left: PlainObject<T>, right: PlainObject<T>): number;\n  <T = string>(left: T, right: T): number;\n}\n\nexport interface TimeSinceOptions {\n  /**\n   * @default \"day\"\n   */\n  day?: string;\n  /**\n   * @default \"days\"\n   */\n  days?: string;\n  /**\n   * @default \"hour\"\n   */\n  hour?: string;\n  /**\n   * @default \"hours\"\n   */\n  hours?: string;\n  /**\n   * @default \"minute\"\n   */\n  minute?: string;\n  /**\n   * @default \"minutes\"\n   */\n  minutes?: string;\n  /**\n   * @default \"month\"\n   */\n  month?: string;\n  /**\n   * @default \"months\"\n   */\n  months?: string;\n  prefix?: string;\n  /**\n   * @default \"second\"\n   */\n  second?: string;\n  /**\n   * @default \"seconds\"\n   */\n  seconds?: string;\n  /**\n   * @default false\n   */\n  skipWeeks?: boolean;\n  /**\n   * @default \"ago\"\n   */\n  suffix?: string;\n  /**\n   * @default \"week\"\n   */\n  week?: string;\n  /**\n   * @default \"weeks\"\n   */\n  weeks?: string;\n  /**\n   * @default \"year\"\n   */\n  year?: string;\n  /**\n   * @default \"years\"\n   */\n  years?: string;\n}\n\nexport interface UniqueOptions {\n  includeLowercase?: boolean;\n  includeNumbers?: boolean;\n  includeSymbols?: boolean;\n  includeUppercase?: boolean;\n}\n\nexport interface ValidatePasswordOptions {\n  maxLength?: number;\n  maxLengthMessage?: string;\n  minLength?: number;\n  minLengthMessage?: string;\n  regex?: RegExp;\n  requiredCharactersMessage?: string;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}