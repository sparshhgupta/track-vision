{"ast":null,"code":"\"use strict\";\n\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __export = (target, all) => {\n  for (var name in all) __defProp(target, name, {\n    get: all[name],\n    enumerable: true\n  });\n};\nvar __copyProps = (to, from, except, desc) => {\n  if (from && typeof from === \"object\" || typeof from === \"function\") {\n    for (let key of __getOwnPropNames(from)) if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n      get: () => from[key],\n      enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n    });\n  }\n  return to;\n};\nvar __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(\n// If the importer is in node compatibility mode or this is not an ESM\n// file that has been converted to a CommonJS file using a Babel-\n// compatible transform (i.e. \"__esModule\" has not been set), then set\n// \"default\" to the CommonJS \"module.exports\" for node compatibility.\nisNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n  value: mod,\n  enumerable: true\n}) : target, mod));\nvar __toCommonJS = mod => __copyProps(__defProp({}, \"__esModule\", {\n  value: true\n}), mod);\n\n// src/index.ts\nvar index_exports = {};\n__export(index_exports, {\n  ASYNC_STATUS: () => ASYNC_STATUS,\n  DAY: () => DAY,\n  HOUR: () => HOUR,\n  MINUTE: () => MINUTE,\n  MONTH: () => MONTH,\n  Types: () => types_exports,\n  WEEK: () => WEEK,\n  YEAR: () => YEAR,\n  canUseDOM: () => canUseDOM,\n  capitalize: () => capitalize,\n  ceil: () => ceil,\n  clamp: () => clamp,\n  cleanUpObject: () => cleanUpObject,\n  cleanupHTML: () => cleanupHTML,\n  cleanupNumericString: () => cleanupNumericString,\n  cleanupURI: () => cleanupURI,\n  conditional: () => conditional,\n  copyToClipboard: () => copyToClipboard,\n  cors: () => cors,\n  createArray: () => createArray,\n  debounce: () => debounce,\n  demethodize: () => demethodize,\n  floor: () => floor,\n  formatBoolean: () => formatBoolean,\n  formatCPF: () => formatCPF,\n  formatDateLocale: () => formatDateLocale,\n  formatMoney: () => formatMoney,\n  formatPhoneBR: () => formatPhoneBR,\n  formatPhoneUS: () => formatPhoneUS,\n  formatPostalCodeBR: () => formatPostalCodeBR,\n  getDataType: () => getDataType,\n  getInitials: () => getInitials,\n  getNestedProperty: () => getNestedProperty,\n  getRandomItem: () => getRandomItem,\n  invariant: () => invariant,\n  invertKeys: () => invertKeys,\n  isDarkMode: () => isDarkMode,\n  isIsoDate: () => isIsoDate,\n  isJSON: () => isJSON,\n  isRequired: () => isRequired,\n  isTouchDevice: () => isTouchDevice,\n  isValidCPF: () => isValidCPF,\n  isValidDate: () => isValidDate,\n  isValidEmail: () => isValidEmail,\n  isoDate: () => isoDate,\n  keyMirror: () => keyMirror,\n  logger: () => logger,\n  mean: () => mean,\n  measureExecutionTime: () => measureExecutionTime,\n  median: () => median,\n  mergeProps: () => mergeProps,\n  mode: () => mode,\n  noop: () => noop,\n  now: () => now,\n  nullify: () => nullify,\n  objectEntries: () => objectEntries,\n  objectKeys: () => objectKeys,\n  objectToArray: () => objectToArray,\n  off: () => off,\n  omit: () => omit,\n  on: () => on,\n  once: () => once,\n  pad: () => pad,\n  percentage: () => percentage,\n  pick: () => pick,\n  pipe: () => pipe,\n  pluralize: () => pluralize,\n  poll: () => poll,\n  popupCenter: () => popupCenter,\n  prefersReducedMotion: () => prefersReducedMotion,\n  px: () => px,\n  queryStringFormat: () => queryStringFormat,\n  queryStringParse: () => queryStringParse,\n  quickSort: () => quickSort,\n  randomNumber: () => randomNumber,\n  removeAccents: () => removeAccents,\n  removeDuplicates: () => removeDuplicates,\n  removeEmojis: () => removeEmojis,\n  removeEmptyTags: () => removeEmptyTags,\n  removeNonPrintableCharacters: () => removeNonPrintableCharacters,\n  removeTags: () => removeTags,\n  removeWhitespace: () => removeWhitespace,\n  request: () => request,\n  round: () => round,\n  shuffle: () => shuffle,\n  sleep: () => sleep,\n  slugify: () => slugify,\n  sortByLocaleCompare: () => sortByLocaleCompare,\n  sortByPrimitive: () => sortByPrimitive,\n  sortComparator: () => sortComparator,\n  sortObjectKeys: () => sortObjectKeys,\n  splitIntoChunks: () => splitIntoChunks,\n  timeSince: () => timeSince,\n  timestamp: () => timestamp,\n  unique: () => unique,\n  uuid: () => uuid,\n  validatePassword: () => validatePassword\n});\nmodule.exports = __toCommonJS(index_exports);\n\n// src/arrays.ts\nfunction createArray(size, start = 1) {\n  return Array.from({\n    length: size\n  }, (_, index) => index + start);\n}\nfunction getRandomItem(input) {\n  return input[Math.floor(Math.random() * input.length)];\n}\nfunction quickSort(input, comparator = sortComparator) {\n  const output = [...input];\n  const recursiveSort = (start, end) => {\n    if (end - start < 1) {\n      return;\n    }\n    const pivotValue = output[end];\n    let splitIndex = start;\n    for (let index = start; index < end; index++) {\n      const sort = comparator(output[index], pivotValue);\n      if (sort === -1) {\n        if (splitIndex !== index) {\n          const temp = output[splitIndex];\n          output[splitIndex] = output[index];\n          output[index] = temp;\n        }\n        splitIndex++;\n      }\n    }\n    output[end] = output[splitIndex];\n    output[splitIndex] = pivotValue;\n    recursiveSort(start, splitIndex - 1);\n    recursiveSort(splitIndex + 1, end);\n  };\n  recursiveSort(0, input.length - 1);\n  return output;\n}\nfunction removeDuplicates(input) {\n  return [...new Set(input)];\n}\nfunction shuffle(input) {\n  let currentIndex = input.length;\n  let randomIndex;\n  let temporaryValue;\n  const output = [...input];\n  while (currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex--);\n    temporaryValue = output[currentIndex];\n    output[currentIndex] = output[randomIndex];\n    output[randomIndex] = temporaryValue;\n  }\n  return output;\n}\nfunction sortByLocaleCompare(key, options = {}) {\n  const {\n    descending,\n    ...compareOptions\n  } = options;\n  if (key) {\n    if (descending) {\n      return (left, right) => right[key].toLowerCase().localeCompare(left[key].toLowerCase(), void 0, compareOptions);\n    }\n    return (left, right) => left[key].toLowerCase().localeCompare(right[key].toLowerCase(), void 0, compareOptions);\n  }\n  if (descending) {\n    return (left, right) => right.toLowerCase().localeCompare(left.toLowerCase(), void 0, compareOptions);\n  }\n  return (left, right) => left.toLowerCase().localeCompare(right.toLowerCase(), void 0, compareOptions);\n}\nfunction sortByPrimitive(key, descending = false) {\n  const firstComparator = descending ? 1 : -1;\n  const secondComparator = descending ? -1 : 1;\n  if (key) {\n    return (left, right) => {\n      if (left[key] === right[key]) {\n        return 0;\n      }\n      return left[key] < right[key] ? firstComparator : secondComparator;\n    };\n  }\n  return (left, right) => {\n    if (left === right) {\n      return 0;\n    }\n    return left < right ? firstComparator : secondComparator;\n  };\n}\nfunction sortComparator(left, right) {\n  if (left < right) {\n    return -1;\n  }\n  if (left > right) {\n    return 1;\n  }\n  return 0;\n}\nfunction splitIntoChunks(input, chunkSize = 25) {\n  if (!Array.isArray(input)) {\n    throw new TypeError(\"expected an array for the first argument\");\n  }\n  const chunks = [];\n  for (let index = 0; index < Math.ceil(input.length / chunkSize); index++) {\n    chunks.push(input.slice(index * chunkSize, (index + 1) * chunkSize));\n  }\n  return chunks;\n}\n\n// src/async.ts\nvar import_is_lite = __toESM(require(\"is-lite\"));\nvar ASYNC_STATUS = {\n  IDLE: \"IDLE\",\n  PENDING: \"PENDING\",\n  SUCCESS: \"SUCCESS\",\n  ERROR: \"ERROR\"\n};\nfunction cors(data, statusCodeOrOptions = 200) {\n  const {\n    allowCredentials = true,\n    allowedHeaders = [],\n    methods = [\"GET\"],\n    origin = \"*\",\n    responseHeaders = void 0,\n    statusCode = 200\n  } = import_is_lite.default.number(statusCodeOrOptions) ? {\n    statusCode: statusCodeOrOptions\n  } : statusCodeOrOptions;\n  const allowMethods = [...methods, \"OPTIONS\"];\n  const allowHeaders = [... /* @__PURE__ */new Set([\"Accept-Version\", \"Accept\", \"Authorization\", \"Content-Length\", \"Content-MD5\", \"Content-Type\", \"Date\", \"x-amz-date\", \"x-amz-security-token\", \"X-Api-Version\", \"X-CSRF-Token\", \"X-Requested-With\", ...allowedHeaders])];\n  let exposedHeaders;\n  if (responseHeaders) {\n    exposedHeaders = {\n      \"Access-Control-Expose-Headers\": Object.keys(responseHeaders).join(\",\"),\n      ...responseHeaders\n    };\n  }\n  return {\n    body: JSON.stringify(data),\n    headers: {\n      \"Access-Control-Allow-Origin\": origin,\n      \"Access-Control-Allow-Credentials\": allowCredentials,\n      \"Access-Control-Allow-Methods\": allowMethods.join(\",\"),\n      \"Access-Control-Allow-Headers\": allowHeaders.join(\",\"),\n      ...exposedHeaders\n    },\n    statusCode\n  };\n}\nasync function poll(condition, options = {}) {\n  const {\n    delay = 1,\n    maxRetries = 5\n  } = options;\n  let retries = 0;\n  while (!condition() && retries <= maxRetries) {\n    await sleep(delay);\n    retries++;\n  }\n  if (retries >= maxRetries) {\n    throw new Error(\"Timeout\");\n  }\n}\nasync function request(url, options = {}) {\n  const {\n    body,\n    headers,\n    method = \"GET\"\n  } = options;\n  if (!url) {\n    throw new Error(\"URL is required\");\n  }\n  const params = {\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/json\",\n      ...headers\n    },\n    method\n  };\n  if (body) {\n    params.body = import_is_lite.default.plainObject(body) ? JSON.stringify(body) : body;\n  }\n  return fetch(url, params).then(async response => {\n    const text = await response.text();\n    let content;\n    try {\n      content = JSON.parse(text);\n    } catch {\n      content = text;\n    }\n    if (response.status > 299) {\n      const error = new Error(response.statusText);\n      error.status = response.status;\n      error.response = content;\n      throw error;\n    } else {\n      return content;\n    }\n  });\n}\nfunction sleep(seconds = 1) {\n  return new Promise(resolve => {\n    setTimeout(resolve, seconds * 1e3);\n  });\n}\n\n// src/date.ts\nvar import_is_lite2 = __toESM(require(\"is-lite\"));\n\n// src/strings.ts\nfunction capitalize(input) {\n  return input.charAt(0).toLocaleUpperCase() + input.slice(1).toLocaleLowerCase();\n}\nfunction cleanupHTML(input) {\n  return removeWhitespace(removeEmptyTags(input));\n}\nfunction cleanupNumericString(value = \"\") {\n  return value.replace(/\\D+/g, \"\");\n}\nfunction cleanupURI(input) {\n  return input.replace(/[$&+,/:;=?@]/g, \"\");\n}\nfunction getInitials(input) {\n  if (!input) {\n    return \"\";\n  }\n  const names = input.trim().split(\" \");\n  if (names.length === 1) {\n    return `${names[0].charAt(0)}`;\n  }\n  return `${names[0].charAt(0)}${names[names.length - 1].charAt(0)}`;\n}\nfunction pluralize(quantity, singular, plural) {\n  if (quantity === 1) {\n    return singular;\n  }\n  return plural || `${singular}s`;\n}\nfunction removeAccents(input) {\n  const removalMap = {\n    A: /[AÀÁÂÃÄÅĀĂĄǍǞǠǺȀȂȦḀẠẢẤẦẨẪẬẮẰẲẴẶⒶＡ]/g,\n    AA: /Ꜳ/g,\n    AE: /[ÆǢǼ]/g,\n    AO: /Ꜵ/g,\n    AU: /Ꜷ/g,\n    AV: /[ꜸꜺ]/g,\n    AY: /Ꜽ/g,\n    B: /[BƁƂɃḂḄḆⒷＢ]/g,\n    C: /[CÇĆĈĊČƇȻḈⒸꜾＣ]/g,\n    D: /[DĎĐƉƊƋḊḌḎḐḒⒹꝹＤ]/g,\n    DZ: /[ǄǱ]/g,\n    Dz: /[ǅǲ]/g,\n    E: /[EÈÉÊËĒĔĖĘĚƎƐȄȆȨḔḖḘḚḜẸẺẼẾỀỂỄỆⒺＥ]/g,\n    F: /[FƑḞⒻꝻＦ]/g,\n    G: /[GĜĞĠĢƓǤǦǴḠⒼꝽꝾꞠＧ]/g,\n    H: /[HĤĦȞḢḤḦḨḪⒽⱧⱵꞍＨ]/g,\n    I: /[IÌÍÎÏĨĪĬĮİƗǏȈȊḬḮỈỊⒾＩ]/g,\n    J: /[JĴɈⒿＪ]/g,\n    K: /[KĶƘǨḰḲḴⓀⱩꝀꝂꝄꞢＫ]/g,\n    L: /[LĹĻĽĿŁȽḶḸḺḼⓁⱠⱢꝆꝈꞀＬ]/g,\n    LJ: /Ǉ/g,\n    Lj: /ǈ/g,\n    M: /[MƜḾṀṂⓂⱮＭ]/g,\n    N: /[NÑŃŅŇƝǸȠṄṆṈṊⓃꞐꞤＮ]/g,\n    NJ: /Ǌ/g,\n    Nj: /ǋ/g,\n    O: /[OÒÓÔÕÖØŌŎŐƆƟƠǑǪǬǾȌȎȪȬȮȰṌṎṐṒỌỎỐỒỔỖỘỚỜỞỠỢⓄꝊꝌＯ]/g,\n    OI: /Ƣ/g,\n    OO: /Ꝏ/g,\n    OU: /Ȣ/g,\n    P: /[PƤṔṖⓅⱣꝐꝒꝔＰ]/g,\n    Q: /[QɊⓆꝖꝘＱ]/g,\n    R: /[RŔŖŘȐȒɌṘṚṜṞⓇⱤꝚꞂꞦＲ]/g,\n    S: /[SŚŜŞŠȘṠṢṤṦṨẞⓈⱾꞄꞨＳ]/g,\n    T: /[TŢŤŦƬƮȚȾṪṬṮṰⓉꞆＴ]/g,\n    TZ: /Ꜩ/g,\n    U: /[UÙÚÛÜŨŪŬŮŰŲƯǓǕǗǙǛȔȖɄṲṴṶṸṺỤỦỨỪỬỮỰⓊＵ]/g,\n    V: /[VƲɅṼṾⓋꝞＶ]/g,\n    VY: /Ꝡ/g,\n    W: /[WŴẀẂẄẆẈⓌⱲＷ]/g,\n    X: /[XẊẌⓍＸ]/g,\n    Y: /[YÝŶŸƳȲɎẎỲỴỶỸỾⓎＹ]/g,\n    Z: /[ZŹŻŽƵȤẐẒẔⓏⱫⱿꝢＺ]/g,\n    a: /[aàáâãäåāăąǎǟǡǻȁȃȧɐḁẚạảấầẩẫậắằẳẵặⓐⱥａ]/g,\n    aa: /ꜳ/g,\n    ae: /[æǣǽ]/g,\n    ao: /ꜵ/g,\n    au: /ꜷ/g,\n    av: /[ꜹꜻ]/g,\n    ay: /ꜽ/g,\n    b: /[bƀƃɓḃḅḇⓑｂ]/g,\n    c: /[cçćĉċčƈȼḉↄⓒꜿｃ]/g,\n    d: /[dďđƌɖɗḋḍḏḑḓⓓꝺｄ]/g,\n    dz: /[ǆǳ]/g,\n    e: /[eèéêëēĕėęěǝȅȇȩɇɛḕḗḙḛḝẹẻẽếềểễệⓔｅ]/g,\n    f: /[fƒḟⓕꝼｆ]/g,\n    g: /[gĝğġģǥǧǵɠᵹḡⓖꝿꞡｇ]/g,\n    h: /[hĥħȟɥḣḥḧḩḫẖⓗⱨⱶｈ]/g,\n    hv: /ƕ/g,\n    i: /[iìíîïĩīĭįıǐȉȋɨḭḯỉịⓘｉ]/g,\n    j: /[jĵǰɉⓙｊ]/g,\n    k: /[kķƙǩḱḳḵⓚⱪꝁꝃꝅꞣｋ]/g,\n    l: /[lĺļľŀłſƚɫḷḹḻḽⓛⱡꝇꝉꞁｌ]/g,\n    lj: /ǉ/g,\n    m: /[mɯɱḿṁṃⓜｍ]/g,\n    n: /[nñńņňŉƞǹɲṅṇṉṋⓝꞑꞥｎ]/g,\n    nj: /ǌ/g,\n    o: /[oòóôõöøōŏőơǒǫǭǿȍȏȫȭȯȱɔɵṍṏṑṓọỏốồổỗộớờởỡợⓞꝋꝍｏ]/g,\n    oi: /ƣ/g,\n    ou: /ȣ/g,\n    oo: /ꝏ/g,\n    p: /[pƥᵽṕṗⓟꝑꝓꝕｐ]/g,\n    q: /[qɋⓠꝗꝙｑ]/g,\n    r: /[rŕŗřȑȓɍɽṙṛṝṟⓡꝛꞃꞧｒ]/g,\n    s: /[sßśŝşšșȿṡṣṥṧṩẛⓢꞅꞩｓ]/g,\n    t: /[tţťŧƭțʈṫṭṯṱẗⓣⱦꞇｔ]/g,\n    tz: /ꜩ/g,\n    u: /[uùúûüũūŭůűųưǔǖǘǚǜȕȗʉṳṵṷṹṻụủứừửữựⓤｕ]/g,\n    v: /[vʋʌṽṿⓥꝟｖ]/g,\n    vy: /ꝡ/g,\n    w: /[wŵẁẃẅẇẉẘⓦⱳｗ]/g,\n    x: /[xẋẍⓧｘ]/g,\n    y: /[yýÿŷƴȳɏẏẙỳỵỷỹỿⓨｙ]/g,\n    z: /[zźżžƶȥɀẑẓẕⓩⱬꝣｚ]/g\n  };\n  let parsedString = input;\n  Object.entries(removalMap).forEach(([key, value]) => {\n    parsedString = parsedString.replace(value, key);\n  });\n  return parsedString;\n}\nfunction removeEmojis(input) {\n  const baseEmojiRegex = /[\\u2700-\\u27bf]|\\ud83c[\\udde6-\\uddff]{2}|[\\ud800-\\udbff][\\udc00-\\udfff]/;\n  const variationSelectorRegex = /[\\ufe0e\\ufe0f]?/;\n  const modifierRegex = /[\\u0300-\\u036f\\u20d0-\\u20f0\\ufe20-\\ufe23]|\\ud83c[\\udffb-\\udfff]/;\n  const zeroWidthJoinerRegex = /\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\u20d0-\\u20f0\\ufe20-\\ufe23]|\\ud83c[\\udffb-\\udfff])?/;\n  const emojiRegex = new RegExp(`(?:${baseEmojiRegex.source})${variationSelectorRegex.source}(?:${modifierRegex.source})?(?:${zeroWidthJoinerRegex.source})*`, \"g\");\n  return input.replace(emojiRegex, \"\").trim();\n}\nfunction removeEmptyTags(input) {\n  return input.replace(/<[^/>][^>]*>\\s*<\\/[^>]+>/gi, \"\");\n}\nfunction removeNonPrintableCharacters(input) {\n  return input.replace(/[^\\x20-\\x7E´\\u00C0-\\u00FFˆ˜]+/g, \"\");\n}\nfunction removeTags(input) {\n  return input.replace(/(<([^>]+)>)/gi, \"\");\n}\nfunction removeWhitespace(input) {\n  return input.replace(/\\r\\n|\\r|\\n|\\t/g, \"\").replace(/ +/g, \" \");\n}\nfunction slugify(input) {\n  return removeAccents(input).replace(/[\\u0300-\\u036f]/g, \"\").replace(/[()]/g, \"\").replace(/ /g, \"-\").replace(/[\"%<>\\\\^`{|}]/g, \"\").toLowerCase();\n}\n\n// src/date.ts\nvar MINUTE = 60;\nvar HOUR = MINUTE * 60;\nvar DAY = HOUR * 24;\nvar WEEK = DAY * 7;\nvar MONTH = DAY * 30;\nvar YEAR = 365 * DAY;\nfunction isIsoDate(input) {\n  if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(input)) {\n    return false;\n  }\n  const date = new Date(input);\n  return date.toISOString() === input;\n}\nfunction isoDate(input) {\n  if (typeof input !== \"undefined\") {\n    return new Date(input).toISOString();\n  }\n  return (/* @__PURE__ */new Date()).toISOString();\n}\nfunction isValidDate(input) {\n  const date = import_is_lite2.default.date(input) ? input : new Date(input);\n  return !Number.isNaN(date.getTime());\n}\nfunction now() {\n  return Math.floor(Date.now() / 1e3);\n}\nfunction timeSince(input, options) {\n  const {\n    day = \"day\",\n    days,\n    hour = \"hour\",\n    hours,\n    minute = \"minute\",\n    minutes,\n    month = \"month\",\n    months,\n    prefix,\n    second = \"second\",\n    seconds,\n    skipWeeks = false,\n    suffix = \"ago\",\n    week = \"week\",\n    weeks,\n    year = \"year\",\n    years\n  } = options || {};\n  const date = typeof input === \"number\" ? input : timestamp(input);\n  const diff = now() - date;\n  let quantity = Math.floor(diff / YEAR);\n  const output = (value, caption) => {\n    let result = `${value} ${caption}`;\n    if (prefix) {\n      result = `${prefix} ${result}`;\n    }\n    if (suffix) {\n      result = `${result} ${suffix}`;\n    }\n    return result;\n  };\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, year, years));\n  }\n  quantity = Math.floor(diff / MONTH);\n  if (quantity > 1) {\n    return output(quantity, pluralize(quantity, month, months));\n  }\n  if (!skipWeeks) {\n    quantity = Math.floor(diff / WEEK);\n    if (quantity > 1) {\n      return output(quantity, pluralize(quantity, week, weeks));\n    }\n  }\n  quantity = Math.floor(diff / DAY);\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, day, days));\n  }\n  quantity = Math.floor(diff / HOUR);\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, hour, hours));\n  }\n  quantity = Math.floor(diff / MINUTE);\n  if (quantity > 1) {\n    return output(quantity, pluralize(quantity, minute, minutes));\n  }\n  return output(Math.floor(diff), pluralize(diff, second, seconds));\n}\nfunction timestamp(input) {\n  if (!input) {\n    return now();\n  }\n  const date = typeof input === \"string\" ? new Date(input) : input;\n  return Math.floor(date.getTime() / 1e3);\n}\n\n// src/devices.ts\nfunction isDarkMode() {\n  return !!window.matchMedia && window.matchMedia(\"(prefers-color-scheme: dark)\").matches;\n}\nfunction isTouchDevice() {\n  return !!window.matchMedia && window.matchMedia(\"(pointer: coarse)\").matches;\n}\nfunction prefersReducedMotion() {\n  return !!window.matchMedia && window.matchMedia(\"prefers-reduced-motion\").matches;\n}\n\n// src/formatters.ts\nfunction formatBoolean(input) {\n  return input ? \"Yes\" : \"No\";\n}\nfunction formatCPF(value) {\n  const clearValue = cleanupNumericString(value);\n  if (clearValue.length >= 10) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(6, 9)}-${clearValue.slice(9, 11)}`;\n  } else if (clearValue.length >= 7) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(6, 9)}`;\n  } else if (clearValue.length >= 4) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}`;\n  }\n  return clearValue;\n}\nfunction formatDateLocale(input, options = {}) {\n  const {\n    locale = \"en-GB\",\n    showTime = false\n  } = options;\n  const formatOptions = {\n    year: \"2-digit\",\n    month: \"2-digit\",\n    day: \"2-digit\"\n  };\n  if (showTime) {\n    formatOptions.hour = \"2-digit\";\n    formatOptions.minute = \"2-digit\";\n  }\n  return new Date(input).toLocaleDateString(locale, formatOptions);\n}\nfunction formatMoney(input, options = {}) {\n  const {\n    decimalChar = \".\",\n    showCents = false,\n    symbol = \"$\",\n    thousandsChar = \",\"\n  } = options;\n  const isNegative = input < 0;\n  const value = Math.abs(input);\n  const [amount, cents] = value.toFixed(2).split(\".\");\n  const padStart = amount.length > 3 ? amount.length % 3 : 0;\n  const initial = amount.slice(0, padStart);\n  const remain = amount.slice(padStart).replace(/(\\d{3})(?=\\d)/g, `$1${thousandsChar}`);\n  let formatted = `${remain}`;\n  if (initial) {\n    formatted = `${initial}${thousandsChar}${remain}`;\n  }\n  if (cents !== \"00\" || showCents) {\n    formatted += `${decimalChar}${cents}`;\n  }\n  return `${isNegative ? \"-\" : \"\"}${symbol}${formatted}`;\n}\nfunction formatPhoneBR(input) {\n  const phone = input.replace(/\\D/g, \"\");\n  if (phone.length === 8) {\n    return phone.replace(/^(\\d{4})(\\d{4}).*/, \"$1-$2\");\n  }\n  if (phone.length === 9) {\n    return phone.replace(/^(\\d{5})(\\d{4}).*/, \"$1-$2\");\n  }\n  if (phone.length === 10 || phone.length === 11) {\n    return phone.replace(/^(\\d{2})(\\d{4,5})(\\d{4}).*/, \"($1) $2-$3\");\n  }\n  return phone;\n}\nfunction formatPhoneUS(input) {\n  const phone = input.replace(/\\D/g, \"\");\n  if (phone.length === 10) {\n    return phone.replace(/^(\\d{3})(\\d{3})(\\d{4}).*/, \"($1) $2-$3\");\n  }\n  if (phone.length === 11 && phone.startsWith(\"1\")) {\n    return phone.replace(/^1(\\d{3})(\\d{3})(\\d{4}).*/, \"+1 ($1) $2-$3\");\n  }\n  return phone;\n}\nfunction formatPostalCodeBR(value) {\n  const clearValue = cleanupNumericString(value);\n  if (clearValue.length >= 6) {\n    return `${clearValue.slice(0, 5)}-${clearValue.slice(5, 8)}`;\n  }\n  return clearValue;\n}\n\n// src/functions.ts\nfunction debounce(callback, delay) {\n  let timeout;\n  return (...parameters) => {\n    clearTimeout(timeout);\n    timeout = setTimeout(() => callback(...parameters), delay);\n  };\n}\nfunction demethodize(fn) {\n  return (parameter, ...rest) => fn.apply(parameter, rest);\n}\nasync function measureExecutionTime(callback) {\n  const start = performance.now();\n  const result = await callback();\n  const end = performance.now();\n  const total = end - start;\n  console.log(`Completed in ${Math.ceil(total)} milliseconds`);\n  return result;\n}\nfunction noop() {\n  return void 0;\n}\nfunction once(fn) {\n  let done = false;\n  let result;\n  return function Fn(...arguments_) {\n    if (!done) {\n      done = true;\n      result = fn(...arguments_);\n    }\n    return result;\n  };\n}\nfunction pipe(...fns) {\n  return input => fns.reduce((previousValue, fn) => fn(previousValue), input);\n}\n\n// src/misc.ts\nvar import_is_lite3 = __toESM(require(\"is-lite\"));\n\n// src/numbers.ts\nfunction ceil(input, digits = 2) {\n  const factor = 10 ** digits;\n  return Math.ceil(input * factor) / factor;\n}\nfunction clamp(value, min = 0, max = 100) {\n  return Math.min(Math.max(value, min), max);\n}\nfunction floor(input, digits = 2) {\n  const factor = 10 ** digits;\n  return Math.floor(input * factor) / factor;\n}\nfunction pad(input, length = 2) {\n  return `${input}`.padStart(length, \"0\");\n}\nfunction percentage(input, total, digits = 2) {\n  const result = input / total * 100;\n  return Number.isFinite(result) ? round(result, digits) : 0;\n}\nfunction randomNumber(min = 0, max = 10) {\n  if (min >= max) {\n    return max;\n  }\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\nfunction round(input, digits = 2) {\n  const factor = 10 ** digits;\n  return Math.round(input * factor) / factor;\n}\n\n// src/misc.ts\nfunction canUseDOM() {\n  return !!(typeof window !== \"undefined\" && window.document?.createElement);\n}\nfunction conditional(cases, defaultCase) {\n  for (const [expression, callback] of cases) {\n    if (expression) {\n      return callback();\n    }\n  }\n  return defaultCase?.();\n}\nasync function copyToClipboard(input) {\n  try {\n    await navigator.clipboard.writeText(input);\n  } catch {\n    return false;\n  }\n  return true;\n}\nfunction getDataType(input, toLowerCase = false) {\n  const dataTypeName = Object.prototype.toString.call(input).slice(8, -1);\n  let output = dataTypeName;\n  if (/HTML\\w+Element/.test(dataTypeName)) {\n    output = \"HTMLElement\";\n  }\n  return toLowerCase ? output.toLowerCase() : output;\n}\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  }\n  const value = import_is_lite3.default.function(message) ? message() : message;\n  throw new Error(value);\n}\nfunction isJSON(input) {\n  try {\n    JSON.parse(input);\n  } catch {\n    return false;\n  }\n  return true;\n}\nfunction isRequired(input = \"parameter\", Constructable = TypeError) {\n  throw new Constructable(`\"${input}\" is required`);\n}\nfunction logger(type, title, data, options = {}) {\n  const {\n    collapsed = true,\n    hideTimestamp = false,\n    skip = false,\n    typeColor = \"gray\"\n  } = options;\n  const groupMethod = collapsed ? console.groupCollapsed : console.group;\n  const date = /* @__PURE__ */new Date();\n  const parts = [`%c ${type}`];\n  const styles = [`color: ${typeColor}; font-weight: lighter;`, \"color: inherit;\"];\n  if (!hideTimestamp) {\n    styles.push(\"color: gray; font-weight: lighter;\");\n  }\n  const time = `${pad(date.getHours(), 2)}:${pad(date.getMinutes(), 2)}:${pad(date.getSeconds(), 2)}`;\n  parts.push(`%c${title}`);\n  if (!hideTimestamp) {\n    parts.push(`%c@ ${time}`);\n  }\n  if (!skip) {\n    groupMethod(parts.join(\" \"), ...styles);\n    console.log(data);\n    console.groupEnd();\n  }\n}\nfunction nullify(value) {\n  return value ?? null;\n}\nfunction on(target, ...rest) {\n  if (target?.addEventListener) {\n    target.addEventListener(...rest);\n  }\n}\nfunction off(target, ...rest) {\n  if (target?.removeEventListener) {\n    target.removeEventListener(...rest);\n  }\n}\nfunction popupCenter(url, title, width, height) {\n  const {\n    screen,\n    screenLeft,\n    screenTop\n  } = window;\n  let screenWidth = window.innerWidth;\n  let screenHeight = window.innerHeight;\n  if (!screenWidth) {\n    screenWidth = document.documentElement.clientWidth ? document.documentElement.clientWidth : screen.width;\n  }\n  if (!screenHeight) {\n    screenHeight = document.documentElement.clientHeight ? document.documentElement.clientHeight : screen.height;\n  }\n  const left = screenWidth / 2 - width / 2 + screenLeft;\n  const top = screenHeight / 2 - height / 2 + screenTop;\n  const popup = window.open(url, title, `menubar=no,location=no,resizable=no,scrollbars=yees,status=no,width=${width},height=${height},top=${top}, left=${left}`);\n  if (popup) {\n    popup.focus();\n  }\n  return popup;\n}\nfunction px(value) {\n  return import_is_lite3.default.number(value) || import_is_lite3.default.numericString(value) ? `${value}px` : value;\n}\nfunction unique(length = 8, options = {}) {\n  const {\n    includeLowercase = true,\n    includeNumbers = true,\n    includeSymbols = false,\n    includeUppercase = true\n  } = options;\n  const lowercase = \"abcdefghijklmnopqrstuvwxyz\";\n  const uppercase = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\n  const numbers = \"0123456789\";\n  const symbols = \"!?@#$%^&*+_-=:.~\";\n  let characters = \"\";\n  if (includeLowercase) {\n    characters += lowercase;\n  }\n  if (includeUppercase) {\n    characters += uppercase;\n  }\n  if (includeNumbers) {\n    characters += numbers;\n  }\n  if (includeSymbols) {\n    characters += symbols;\n  }\n  let result = \"\";\n  for (let index = length; index > 0; --index) {\n    result += characters[Math.round(Math.random() * (characters.length - 1))];\n  }\n  return result;\n}\nfunction uuid() {\n  return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, c => {\n    const r = Math.random() * 16 | 0;\n    const v = c === \"x\" ? r : r & 3 | 8;\n    return v.toString(16);\n  });\n}\n\n// src/objects.ts\nvar import_is_lite4 = __toESM(require(\"is-lite\"));\nfunction cleanUpObject(input) {\n  const output = {};\n  for (const key in input) {\n    if (input[key] !== void 0) {\n      output[key] = input[key];\n    }\n  }\n  return output;\n}\nfunction getNestedProperty(input, path) {\n  if (!import_is_lite4.default.plainObject(input) && !import_is_lite4.default.array(input) || !path) {\n    return input;\n  }\n  const segments = path.split(\".\");\n  const {\n    length\n  } = segments;\n  let output = input;\n  for (let index = 0; index < length; index++) {\n    const currentSegment = segments[index];\n    const remainingSegments = segments.slice(index + 1);\n    if (currentSegment === \"+\" && import_is_lite4.default.array(output) && remainingSegments.length === 1) {\n      return output.map(d => d[remainingSegments.join(\".\")]);\n    }\n    try {\n      output = output[currentSegment];\n    } catch {}\n  }\n  return output;\n}\nfunction invertKeys(input) {\n  if (!import_is_lite4.default.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  const result = {};\n  for (const [key, value] of Object.entries(input)) {\n    result[value] = key;\n  }\n  return result;\n}\nfunction keyMirror(input) {\n  if (!import_is_lite4.default.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  const output = {};\n  for (const key in input) {\n    if (!Object.prototype.hasOwnProperty.call(output, key)) {\n      output[key] = key;\n    }\n  }\n  return output;\n}\nfunction mergeProps(defaultProps, props) {\n  const cleanProps = cleanUpObject(props);\n  return {\n    ...defaultProps,\n    ...cleanProps\n  };\n}\nfunction objectEntries(input) {\n  return Object.entries(input);\n}\nfunction objectKeys(input) {\n  return Object.keys(input);\n}\nfunction objectToArray(input, includeOnly) {\n  if (!import_is_lite4.default.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  return Object.entries(input).filter(([, value]) => includeOnly ? typeof value === `${includeOnly}` : true).map(([key, value]) => ({\n    [key]: value\n  }));\n}\nfunction omit(input, ...filter) {\n  if (!import_is_lite4.default.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  const output = {};\n  for (const key in input) {\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (!filter.includes(key)) {\n        output[key] = input[key];\n      }\n    }\n  }\n  return output;\n}\nfunction pick(input, ...filter) {\n  if (!import_is_lite4.default.plainObject(input)) {\n    throw new TypeError(\"Expected an object\");\n  }\n  if (!filter.length) {\n    return input;\n  }\n  const output = {};\n  for (const key in input) {\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (filter.includes(key)) {\n        output[key] = input[key];\n      }\n    }\n  }\n  return output;\n}\nfunction queryStringFormat(input, options = {}) {\n  const {\n    addPrefix = false,\n    encoder = encodeURIComponent,\n    encodeValuesOnly = true\n  } = options;\n  if (!import_is_lite4.default.plainObject(input)) {\n    throw new TypeError(\"input type isn't supported\");\n  }\n  const isValidInput = Object.values(input).every(item => {\n    if (import_is_lite4.default.array(item)) {\n      return item.every(d => import_is_lite4.default.string(d) || import_is_lite4.default.number(d));\n    }\n    return import_is_lite4.default.string(item);\n  });\n  if (!isValidInput) {\n    throw new TypeError(\"input format isn't supported\");\n  }\n  const output = Object.entries(input).map(([key, value]) => {\n    const nextKey = encodeValuesOnly ? key : encoder(key);\n    const nextValue = import_is_lite4.default.array(value) ? value.map(encoder).join(\",\") : encoder(`${value}`);\n    return `${nextKey}=${nextValue}`;\n  }).join(\"&\");\n  return `${addPrefix ? \"?\" : \"\"}${output}`;\n}\nfunction queryStringParse(input) {\n  let search = input;\n  if (input.slice(0, 1) === \"?\") {\n    search = input.slice(1);\n  }\n  return search.split(\"&\").reduce((acc, d) => {\n    const [key, value] = d.split(\"=\");\n    acc[decodeURIComponent(key)] = decodeURIComponent(value);\n    return acc;\n  }, {});\n}\nfunction sortObjectKeys(input) {\n  return objectKeys(input).sort().reduce((acc, key) => {\n    acc[key] = input[key];\n    return acc;\n  }, {});\n}\n\n// src/statistics.ts\nvar import_is_lite5 = __toESM(require(\"is-lite\"));\nfunction mean(input, precision) {\n  const output = input.reduce((sum, value) => sum + value, 0) / input.length;\n  if (import_is_lite5.default.number(precision)) {\n    return round(output, precision);\n  }\n  return output;\n}\nfunction median(input) {\n  const sorted = [...input].sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n  return sorted[middle];\n}\nfunction mode(input) {\n  const count = /* @__PURE__ */new Map();\n  for (const value of input) {\n    const current = count.get(value) ?? 0;\n    count.set(value, current + 1);\n  }\n  const sorted = [...count.entries()].sort((a, b) => b[1] - a[1]);\n  return sorted[0][0];\n}\n\n// src/validators.ts\nfunction isValidCPF(value) {\n  if (!value) {\n    return false;\n  }\n  const newValue = value.replace(/[.-]/g, \"\");\n  let sum = 0;\n  let rest;\n  if (/^(\\d)\\1+$/.test(newValue)) {\n    return false;\n  }\n  for (let index = 1; index <= 9; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (11 - index);\n  }\n  rest = sum * 10 % 11;\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n  if (rest !== parseInt(newValue.substring(9, 10), 10)) {\n    return false;\n  }\n  sum = 0;\n  for (let index = 1; index <= 10; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (12 - index);\n  }\n  rest = sum * 10 % 11;\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n  return rest === parseInt(newValue.substring(10, 11), 10);\n}\nfunction isValidEmail(value) {\n  return /^[\\w%+.-]+@[\\d.a-z-]+\\.[a-z]{2,}$/i.test(value);\n}\nfunction validatePassword(password, options) {\n  const {\n    maxLength = 64,\n    maxLengthMessage = \"Password must be a maximum of 64 characters\",\n    minLength = 6,\n    minLengthMessage = \"Password must be at least 6 characters long\",\n    regex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!#$%&*?@^]).*$/,\n    requiredCharactersMessage = \"Password must have at least 1 number, 1 lowercase, 1 uppercase and 1 special character\"\n  } = options || {};\n  if (password.length < minLength) {\n    throw new Error(minLengthMessage);\n  }\n  if (password.length > maxLength) {\n    throw new Error(maxLengthMessage);\n  }\n  if (!regex.test(password)) {\n    throw new Error(requiredCharactersMessage);\n  }\n  return true;\n}\n\n// src/types.ts\nvar types_exports = {};\n// Annotate the CommonJS export names for ESM import in node:\n0 && (module.exports = {\n  ASYNC_STATUS,\n  DAY,\n  HOUR,\n  MINUTE,\n  MONTH,\n  Types,\n  WEEK,\n  YEAR,\n  canUseDOM,\n  capitalize,\n  ceil,\n  clamp,\n  cleanUpObject,\n  cleanupHTML,\n  cleanupNumericString,\n  cleanupURI,\n  conditional,\n  copyToClipboard,\n  cors,\n  createArray,\n  debounce,\n  demethodize,\n  floor,\n  formatBoolean,\n  formatCPF,\n  formatDateLocale,\n  formatMoney,\n  formatPhoneBR,\n  formatPhoneUS,\n  formatPostalCodeBR,\n  getDataType,\n  getInitials,\n  getNestedProperty,\n  getRandomItem,\n  invariant,\n  invertKeys,\n  isDarkMode,\n  isIsoDate,\n  isJSON,\n  isRequired,\n  isTouchDevice,\n  isValidCPF,\n  isValidDate,\n  isValidEmail,\n  isoDate,\n  keyMirror,\n  logger,\n  mean,\n  measureExecutionTime,\n  median,\n  mergeProps,\n  mode,\n  noop,\n  now,\n  nullify,\n  objectEntries,\n  objectKeys,\n  objectToArray,\n  off,\n  omit,\n  on,\n  once,\n  pad,\n  percentage,\n  pick,\n  pipe,\n  pluralize,\n  poll,\n  popupCenter,\n  prefersReducedMotion,\n  px,\n  queryStringFormat,\n  queryStringParse,\n  quickSort,\n  randomNumber,\n  removeAccents,\n  removeDuplicates,\n  removeEmojis,\n  removeEmptyTags,\n  removeNonPrintableCharacters,\n  removeTags,\n  removeWhitespace,\n  request,\n  round,\n  shuffle,\n  sleep,\n  slugify,\n  sortByLocaleCompare,\n  sortByPrimitive,\n  sortComparator,\n  sortObjectKeys,\n  splitIntoChunks,\n  timeSince,\n  timestamp,\n  unique,\n  uuid,\n  validatePassword\n});","map":{"version":3,"names":["index_exports","__export","ASYNC_STATUS","DAY","HOUR","MINUTE","MONTH","Types","types_exports","WEEK","YEAR","canUseDOM","capitalize","ceil","clamp","cleanUpObject","cleanupHTML","cleanupNumericString","cleanupURI","conditional","copyToClipboard","cors","createArray","debounce","demethodize","floor","formatBoolean","formatCPF","formatDateLocale","formatMoney","formatPhoneBR","formatPhoneUS","formatPostalCodeBR","getDataType","getInitials","getNestedProperty","getRandomItem","invariant","invertKeys","isDarkMode","isIsoDate","isJSON","isRequired","isTouchDevice","isValidCPF","isValidDate","isValidEmail","isoDate","keyMirror","logger","mean","measureExecutionTime","median","mergeProps","mode","noop","now","nullify","objectEntries","objectKeys","objectToArray","off","omit","on","once","pad","percentage","pick","pipe","pluralize","poll","popupCenter","prefersReducedMotion","px","queryStringFormat","queryStringParse","quickSort","randomNumber","removeAccents","removeDuplicates","removeEmojis","removeEmptyTags","removeNonPrintableCharacters","removeTags","removeWhitespace","request","round","shuffle","sleep","slugify","sortByLocaleCompare","sortByPrimitive","sortComparator","sortObjectKeys","splitIntoChunks","timeSince","timestamp","unique","uuid","validatePassword","module","exports","__toCommonJS","size","start","Array","from","length","_","index","input","Math","random","comparator","output","recursiveSort","end","pivotValue","splitIndex","sort","temp","Set","currentIndex","randomIndex","temporaryValue","key","options","descending","compareOptions","left","right","toLowerCase","localeCompare","firstComparator","secondComparator","chunkSize","isArray","TypeError","chunks","push","slice","import_is_lite","__toESM","require","IDLE","PENDING","SUCCESS","ERROR","data","statusCodeOrOptions","allowCredentials","allowedHeaders","methods","origin","responseHeaders","statusCode","default","number","allowMethods","allowHeaders","exposedHeaders","Object","keys","join","body","JSON","stringify","headers","condition","delay","maxRetries","retries","Error","url","method","params","Accept","plainObject","fetch","then","response","text","content","parse","status","error","statusText","seconds","Promise","resolve","setTimeout","import_is_lite2","charAt","toLocaleUpperCase","toLocaleLowerCase","value","replace","names","trim","split","quantity","singular","plural","removalMap","A","AA","AE","AO","AU","AV","AY","B","C","D","DZ","Dz","E","F","G","H","I","J","K","L","LJ","Lj","M","N","NJ","Nj","O","OI","OO","OU","P","Q","R","S","T","TZ","U","V","VY","W","X","Y","Z","a","aa","ae","ao","au","av","ay","b","c","d","dz","e","f","g","h","hv","i","j","k","l","lj","m","n","nj","o","oi","ou","oo","p","q","r","s","t","tz","u","v","vy","w","x","y","z","parsedString","entries","forEach","baseEmojiRegex","variationSelectorRegex","modifierRegex","zeroWidthJoinerRegex","emojiRegex","RegExp","source","test","date","Date","toISOString","Number","isNaN","getTime","day","days","hour","hours","minute","minutes","month","months","prefix","second","skipWeeks","suffix","week","weeks","year","years","diff","caption","result","window","matchMedia","matches","clearValue","locale","showTime","formatOptions","toLocaleDateString","decimalChar","showCents","symbol","thousandsChar","isNegative","abs","amount","cents","toFixed","padStart","initial","remain","formatted","phone","startsWith","callback","timeout","parameters","clearTimeout","fn","parameter","rest","apply","performance","total","console","log","done","Fn","arguments_","fns","reduce","previousValue","import_is_lite3","digits","factor","min","max","isFinite","document","createElement","cases","defaultCase","expression","navigator","clipboard","writeText","dataTypeName","prototype","toString","call","message","function","Constructable","type","title","collapsed","hideTimestamp","skip","typeColor","groupMethod","groupCollapsed","group","parts","styles","time","getHours","getMinutes","getSeconds","groupEnd","target","addEventListener","removeEventListener","width","height","screen","screenLeft","screenTop","screenWidth","innerWidth","screenHeight","innerHeight","documentElement","clientWidth","clientHeight","top","popup","open","focus","numericString","includeLowercase","includeNumbers","includeSymbols","includeUppercase","lowercase","uppercase","numbers","symbols","characters","import_is_lite4","path","array","segments","currentSegment","remainingSegments","map","hasOwnProperty","defaultProps","props","cleanProps","includeOnly","filter","includes","addPrefix","encoder","encodeURIComponent","encodeValuesOnly","isValidInput","values","every","item","string","nextKey","nextValue","search","acc","decodeURIComponent","import_is_lite5","precision","sum","sorted","middle","count","Map","current","get","set","newValue","parseInt","substring","password","maxLength","maxLengthMessage","minLength","minLengthMessage","regex","requiredCharactersMessage"],"sources":["../src/index.ts","../src/arrays.ts","../src/async.ts","../src/date.ts","../src/strings.ts","../src/devices.ts","../src/formatters.ts","../src/functions.ts","../src/misc.ts","../src/numbers.ts","../src/objects.ts","../src/statistics.ts","../src/validators.ts","../src/types.ts"],"sourcesContent":["export * from './arrays';\nexport * from './async';\nexport * from './date';\nexport * from './devices';\nexport * from './formatters';\nexport * from './functions';\nexport * from './misc';\nexport * from './numbers';\nexport * from './objects';\nexport * from './statistics';\nexport * from './strings';\nexport * from './validators';\n\nexport * as Types from './types';\n","import { PlainObject } from '@gilbarbara/types';\n\nimport { SortFunction } from './types';\n\n/**\n * Create a sequential array of numbers\n */\nexport function createArray(size: number, start = 1) {\n  return Array.from({ length: size }, (_, index) => index + start);\n}\n\n/**\n * Get a random item from an array\n */\nexport function getRandomItem<T>(input: T[]) {\n  return input[Math.floor(Math.random() * input.length)];\n}\n\n/**\n * Sort an array of numbers using a quick sort algorithm\n */\nexport function quickSort<T extends string | number>(input: T[], comparator = sortComparator): T[] {\n  // Create a sortable array to return.\n  const output = [...input];\n\n  // Recursively sort sub-arrays.\n  const recursiveSort = (start: number, end: number) => {\n    // If this sub-array is empty, it's sorted.\n    if (end - start < 1) {\n      return;\n    }\n\n    const pivotValue = output[end];\n    let splitIndex = start;\n\n    for (let index = start; index < end; index++) {\n      const sort = comparator(output[index], pivotValue);\n\n      // This value is less than the pivot value.\n      if (sort === -1) {\n        // If the element just to the right of the split index,\n        //   isn't this element, swap them.\n        if (splitIndex !== index) {\n          const temp = output[splitIndex];\n\n          output[splitIndex] = output[index];\n          output[index] = temp;\n        }\n\n        // Move the split index to the right by one,\n        //   denoting an increase in the less-than sub-array size.\n        splitIndex++;\n      }\n\n      // Leave values that are greater than or equal to\n      //   the pivot value where they are.\n    }\n\n    // Move the pivot value to between the split.\n    output[end] = output[splitIndex];\n    output[splitIndex] = pivotValue;\n\n    // Recursively sort the less-than and greater-than arrays.\n    recursiveSort(start, splitIndex - 1);\n    recursiveSort(splitIndex + 1, end);\n  };\n\n  // Sort the entire array.\n  recursiveSort(0, input.length - 1);\n\n  return output;\n}\n\n/**\n * Remove duplicates from the array\n */\nexport function removeDuplicates<T = unknown>(input: T[]): T[] {\n  return [...new Set(input)];\n}\n\n/**\n * Shuffle an array using the Fisher-Yates algorithm\n */\nexport function shuffle<T = unknown>(input: T[]) {\n  let currentIndex = input.length;\n  let randomIndex;\n  let temporaryValue;\n  const output = [...input];\n\n  while (currentIndex) {\n    randomIndex = Math.floor(Math.random() * currentIndex--);\n    temporaryValue = output[currentIndex];\n    output[currentIndex] = output[randomIndex];\n    output[randomIndex] = temporaryValue;\n  }\n\n  return output;\n}\n\n/**\n * Sort an array with localeCompare\n */\nexport function sortByLocaleCompare(\n  key?: string,\n  options: Intl.CollatorOptions & { descending?: boolean } = {},\n): SortFunction {\n  const { descending, ...compareOptions } = options;\n\n  if (key) {\n    if (descending) {\n      return <T extends PlainObject<any>>(left: PlainObject<T>, right: PlainObject<T>) =>\n        right[key].toLowerCase().localeCompare(left[key].toLowerCase(), undefined, compareOptions);\n    }\n\n    return <T extends PlainObject<any>>(left: PlainObject<T>, right: PlainObject<T>) =>\n      left[key].toLowerCase().localeCompare(right[key].toLowerCase(), undefined, compareOptions);\n  }\n\n  if (descending) {\n    return <T extends string>(left: T, right: T) =>\n      right.toLowerCase().localeCompare(left.toLowerCase(), undefined, compareOptions);\n  }\n\n  return <T extends string>(left: T, right: T) =>\n    left.toLowerCase().localeCompare(right.toLowerCase(), undefined, compareOptions);\n}\n\n/**\n * Sort an array by primitive values\n */\nexport function sortByPrimitive<T extends number | boolean>(\n  key?: string,\n  descending = false,\n): SortFunction {\n  const firstComparator = descending ? 1 : -1;\n  const secondComparator = descending ? -1 : 1;\n\n  if (key) {\n    return <P extends PlainObject<any>>(left: PlainObject<P>, right: PlainObject<P>) => {\n      if (left[key] === right[key]) {\n        return 0;\n      }\n\n      return left[key] < right[key] ? firstComparator : secondComparator;\n    };\n  }\n\n  return <P extends T>(left: P, right: P) => {\n    if (left === right) {\n      return 0;\n    }\n\n    return left < right ? firstComparator : secondComparator;\n  };\n}\n\n/**\n * Basic sort comparator\n */\nexport function sortComparator(left: string | number, right: string | number) {\n  if (left < right) {\n    return -1;\n  }\n\n  if (left > right) {\n    return 1;\n  }\n\n  return 0;\n}\n\nexport function splitIntoChunks<T>(input: T[], chunkSize: number = 25): T[][] {\n  if (!Array.isArray(input)) {\n    throw new TypeError('expected an array for the first argument');\n  }\n\n  const chunks: T[][] = [];\n\n  for (let index = 0; index < Math.ceil(input.length / chunkSize); index++) {\n    chunks.push(input.slice(index * chunkSize, (index + 1) * chunkSize));\n  }\n\n  return chunks;\n}\n","import is from 'is-lite';\n\nimport { CorsOptions, PollOptions, RequestError, RequestOptions } from './types';\n\nexport const ASYNC_STATUS = {\n  IDLE: 'IDLE',\n  PENDING: 'PENDING',\n  SUCCESS: 'SUCCESS',\n  ERROR: 'ERROR',\n} as const;\n\n/**\n * Format a CORS response\n */\nexport function cors(data: any, statusCodeOrOptions: number | CorsOptions = 200) {\n  const {\n    allowCredentials = true,\n    allowedHeaders = [],\n    methods = ['GET'],\n    origin = '*',\n    responseHeaders = undefined,\n    statusCode = 200,\n  } = is.number(statusCodeOrOptions) ? { statusCode: statusCodeOrOptions } : statusCodeOrOptions;\n\n  const allowMethods = [...methods, 'OPTIONS'];\n  const allowHeaders = [\n    ...new Set([\n      'Accept-Version',\n      'Accept',\n      'Authorization',\n      'Content-Length',\n      'Content-MD5',\n      'Content-Type',\n      'Date',\n      'x-amz-date',\n      'x-amz-security-token',\n      'X-Api-Version',\n      'X-CSRF-Token',\n      'X-Requested-With',\n      ...allowedHeaders,\n    ]),\n  ];\n  let exposedHeaders;\n\n  if (responseHeaders) {\n    exposedHeaders = {\n      'Access-Control-Expose-Headers': Object.keys(responseHeaders).join(','),\n      ...responseHeaders,\n    };\n  }\n\n  return {\n    body: JSON.stringify(data),\n    headers: {\n      'Access-Control-Allow-Origin': origin,\n      'Access-Control-Allow-Credentials': allowCredentials,\n      'Access-Control-Allow-Methods': allowMethods.join(','),\n      'Access-Control-Allow-Headers': allowHeaders.join(','),\n      ...exposedHeaders,\n    },\n    statusCode,\n  };\n}\n\n/**\n *\n * @param condition\n * @param options\n */\nexport async function poll(condition: () => boolean, options: PollOptions = {}): Promise<void> {\n  const { delay = 1, maxRetries = 5 } = options;\n  let retries = 0;\n\n  while (!condition() && retries <= maxRetries) {\n    // eslint-disable-next-line no-await-in-loop\n    await sleep(delay);\n    retries++;\n  }\n\n  if (retries >= maxRetries) {\n    throw new Error('Timeout');\n  }\n}\n\n/**\n * Make async requests\n */\nexport async function request<D = any>(url: string, options: RequestOptions = {}): Promise<D> {\n  const { body, headers, method = 'GET' }: RequestOptions = options;\n\n  if (!url) {\n    throw new Error('URL is required');\n  }\n\n  const params: RequestOptions = {\n    headers: {\n      Accept: 'application/json',\n      'Content-Type': 'application/json',\n      ...headers,\n    },\n    method,\n  };\n\n  if (body) {\n    params.body = is.plainObject(body) ? JSON.stringify(body) : body;\n  }\n\n  return fetch(url, params).then(async response => {\n    const text = await response.text();\n    let content: any;\n\n    try {\n      content = JSON.parse(text);\n    } catch {\n      content = text;\n    }\n\n    if (response.status > 299) {\n      const error = new Error(response.statusText) as RequestError;\n\n      error.status = response.status;\n      error.response = content;\n\n      throw error;\n    } else {\n      return content;\n    }\n  });\n}\n\n/**\n * Block execution\n */\nexport function sleep(seconds = 1) {\n  return new Promise(resolve => {\n    setTimeout(resolve, seconds * 1000);\n  });\n}\n","import is from 'is-lite';\n\nimport { pluralize } from './strings';\nimport { TimeSinceOptions } from './types';\n\nexport const MINUTE = 60;\nexport const HOUR = MINUTE * 60;\nexport const DAY = HOUR * 24;\nexport const WEEK = DAY * 7;\nexport const MONTH = DAY * 30;\nexport const YEAR = 365 * DAY;\n\nexport function isIsoDate(input: string) {\n  if (!/\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}.\\d{3}Z/.test(input)) {\n    return false;\n  }\n\n  const date = new Date(input);\n\n  return date.toISOString() === input;\n}\n\n/**\n * Check if the input is a valid date.\n */\nexport function isoDate(input?: string | number) {\n  if (typeof input !== 'undefined') {\n    return new Date(input).toISOString();\n  }\n\n  return new Date().toISOString();\n}\n\n/**\n * Check if the input is a valid date.\n */\nexport function isValidDate(input: string | number | Date) {\n  const date = is.date(input) ? input : new Date(input);\n\n  return !Number.isNaN(date.getTime());\n}\n\n/**\n * Returns the unixtime (in seconds).\n */\nexport function now() {\n  return Math.floor(Date.now() / 1000);\n}\n\n/**\n * Returns how much time has passed since the input.\n */\nexport function timeSince(input: Date | string | number, options?: TimeSinceOptions) {\n  const {\n    day = 'day',\n    days,\n    hour = 'hour',\n    hours,\n    minute = 'minute',\n    minutes,\n    month = 'month',\n    months,\n    prefix,\n    second = 'second',\n    seconds,\n    skipWeeks = false,\n    suffix = 'ago',\n    week = 'week',\n    weeks,\n    year = 'year',\n    years,\n  } = options || {};\n  const date = typeof input === 'number' ? input : timestamp(input);\n  const diff = now() - date;\n  let quantity = Math.floor(diff / YEAR);\n\n  const output = (value: number, caption: string) => {\n    let result = `${value} ${caption}`;\n\n    if (prefix) {\n      result = `${prefix} ${result}`;\n    }\n\n    if (suffix) {\n      result = `${result} ${suffix}`;\n    }\n\n    return result;\n  };\n\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, year, years));\n  }\n\n  quantity = Math.floor(diff / MONTH);\n\n  if (quantity > 1) {\n    return output(quantity, pluralize(quantity, month, months));\n  }\n\n  if (!skipWeeks) {\n    quantity = Math.floor(diff / WEEK);\n\n    if (quantity > 1) {\n      return output(quantity, pluralize(quantity, week, weeks));\n    }\n  }\n\n  quantity = Math.floor(diff / DAY);\n\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, day, days));\n  }\n\n  quantity = Math.floor(diff / HOUR);\n\n  if (quantity >= 1) {\n    return output(quantity, pluralize(quantity, hour, hours));\n  }\n\n  quantity = Math.floor(diff / MINUTE);\n\n  if (quantity > 1) {\n    return output(quantity, pluralize(quantity, minute, minutes));\n  }\n\n  return output(Math.floor(diff), pluralize(diff, second, seconds));\n}\n\n/**\n * Get the timestamp (in seconds) for a date.\n */\nexport function timestamp(input?: Date | string) {\n  if (!input) {\n    return now();\n  }\n\n  const date = typeof input === 'string' ? new Date(input) : input;\n\n  return Math.floor(date.getTime() / 1000);\n}\n","/**\n * Capitalize the first letter\n */\nexport function capitalize(input: string) {\n  return input.charAt(0).toLocaleUpperCase() + input.slice(1).toLocaleLowerCase();\n}\n\n/**\n * Cleanup HTML content\n */\nexport function cleanupHTML(input: string) {\n  return removeWhitespace(removeEmptyTags(input));\n}\n\n/**\n * Cleanup a numeric string\n */\nexport function cleanupNumericString(value = '') {\n  return value.replace(/\\D+/g, '');\n}\n\n/**\n * Cleanup URI characters\n */\nexport function cleanupURI(input: string) {\n  return input.replace(/[$&+,/:;=?@]/g, '');\n}\n\n/**\n * Get initials from name\n */\nexport function getInitials(input: string) {\n  if (!input) {\n    return '';\n  }\n\n  const names = input.trim().split(' ');\n\n  if (names.length === 1) {\n    return `${names[0].charAt(0)}`;\n  }\n\n  return `${names[0].charAt(0)}${names[names.length - 1].charAt(0)}`;\n}\n\n/**\n * Pluralize strings.\n *\n * If the plural form just adds an `s` to the end, you don't need to pass it.\n */\nexport function pluralize(quantity: number, singular: string, plural?: string) {\n  if (quantity === 1) {\n    return singular;\n  }\n\n  return plural || `${singular}s`;\n}\n\n/**\n * Remove accents\n */\nexport function removeAccents(input: string) {\n  const removalMap = {\n    A: /[AÀÁÂÃÄÅĀĂĄǍǞǠǺȀȂȦḀẠẢẤẦẨẪẬẮẰẲẴẶⒶＡ]/g,\n    AA: /Ꜳ/g,\n    AE: /[ÆǢǼ]/g,\n    AO: /Ꜵ/g,\n    AU: /Ꜷ/g,\n    AV: /[ꜸꜺ]/g,\n    AY: /Ꜽ/g,\n    B: /[BƁƂɃḂḄḆⒷＢ]/g,\n    C: /[CÇĆĈĊČƇȻḈⒸꜾＣ]/g,\n    D: /[DĎĐƉƊƋḊḌḎḐḒⒹꝹＤ]/g,\n    DZ: /[ǄǱ]/g,\n    Dz: /[ǅǲ]/g,\n    E: /[EÈÉÊËĒĔĖĘĚƎƐȄȆȨḔḖḘḚḜẸẺẼẾỀỂỄỆⒺＥ]/g,\n    F: /[FƑḞⒻꝻＦ]/g,\n    G: /[GĜĞĠĢƓǤǦǴḠⒼꝽꝾꞠＧ]/g,\n    H: /[HĤĦȞḢḤḦḨḪⒽⱧⱵꞍＨ]/g,\n    I: /[IÌÍÎÏĨĪĬĮİƗǏȈȊḬḮỈỊⒾＩ]/g,\n    J: /[JĴɈⒿＪ]/g,\n    K: /[KĶƘǨḰḲḴⓀⱩꝀꝂꝄꞢＫ]/g,\n    L: /[LĹĻĽĿŁȽḶḸḺḼⓁⱠⱢꝆꝈꞀＬ]/g,\n    LJ: /Ǉ/g,\n    Lj: /ǈ/g,\n    M: /[MƜḾṀṂⓂⱮＭ]/g,\n    N: /[NÑŃŅŇƝǸȠṄṆṈṊⓃꞐꞤＮ]/g,\n    NJ: /Ǌ/g,\n    Nj: /ǋ/g,\n    O: /[OÒÓÔÕÖØŌŎŐƆƟƠǑǪǬǾȌȎȪȬȮȰṌṎṐṒỌỎỐỒỔỖỘỚỜỞỠỢⓄꝊꝌＯ]/g,\n    OI: /Ƣ/g,\n    OO: /Ꝏ/g,\n    OU: /Ȣ/g,\n    P: /[PƤṔṖⓅⱣꝐꝒꝔＰ]/g,\n    Q: /[QɊⓆꝖꝘＱ]/g,\n    R: /[RŔŖŘȐȒɌṘṚṜṞⓇⱤꝚꞂꞦＲ]/g,\n    S: /[SŚŜŞŠȘṠṢṤṦṨẞⓈⱾꞄꞨＳ]/g,\n    T: /[TŢŤŦƬƮȚȾṪṬṮṰⓉꞆＴ]/g,\n    TZ: /Ꜩ/g,\n    U: /[UÙÚÛÜŨŪŬŮŰŲƯǓǕǗǙǛȔȖɄṲṴṶṸṺỤỦỨỪỬỮỰⓊＵ]/g,\n    V: /[VƲɅṼṾⓋꝞＶ]/g,\n    VY: /Ꝡ/g,\n    W: /[WŴẀẂẄẆẈⓌⱲＷ]/g,\n    X: /[XẊẌⓍＸ]/g,\n    Y: /[YÝŶŸƳȲɎẎỲỴỶỸỾⓎＹ]/g,\n    Z: /[ZŹŻŽƵȤẐẒẔⓏⱫⱿꝢＺ]/g,\n    a: /[aàáâãäåāăąǎǟǡǻȁȃȧɐḁẚạảấầẩẫậắằẳẵặⓐⱥａ]/g,\n    aa: /ꜳ/g,\n    ae: /[æǣǽ]/g,\n    ao: /ꜵ/g,\n    au: /ꜷ/g,\n    av: /[ꜹꜻ]/g,\n    ay: /ꜽ/g,\n    b: /[bƀƃɓḃḅḇⓑｂ]/g,\n    c: /[cçćĉċčƈȼḉↄⓒꜿｃ]/g,\n    d: /[dďđƌɖɗḋḍḏḑḓⓓꝺｄ]/g,\n    dz: /[ǆǳ]/g,\n    e: /[eèéêëēĕėęěǝȅȇȩɇɛḕḗḙḛḝẹẻẽếềểễệⓔｅ]/g,\n    f: /[fƒḟⓕꝼｆ]/g,\n    g: /[gĝğġģǥǧǵɠᵹḡⓖꝿꞡｇ]/g,\n    h: /[hĥħȟɥḣḥḧḩḫẖⓗⱨⱶｈ]/g,\n    hv: /ƕ/g,\n    i: /[iìíîïĩīĭįıǐȉȋɨḭḯỉịⓘｉ]/g,\n    j: /[jĵǰɉⓙｊ]/g,\n    k: /[kķƙǩḱḳḵⓚⱪꝁꝃꝅꞣｋ]/g,\n    l: /[lĺļľŀłſƚɫḷḹḻḽⓛⱡꝇꝉꞁｌ]/g,\n    lj: /ǉ/g,\n    m: /[mɯɱḿṁṃⓜｍ]/g,\n    n: /[nñńņňŉƞǹɲṅṇṉṋⓝꞑꞥｎ]/g,\n    nj: /ǌ/g,\n    o: /[oòóôõöøōŏőơǒǫǭǿȍȏȫȭȯȱɔɵṍṏṑṓọỏốồổỗộớờởỡợⓞꝋꝍｏ]/g,\n    oi: /ƣ/g,\n    ou: /ȣ/g,\n    oo: /ꝏ/g,\n    p: /[pƥᵽṕṗⓟꝑꝓꝕｐ]/g,\n    q: /[qɋⓠꝗꝙｑ]/g,\n    r: /[rŕŗřȑȓɍɽṙṛṝṟⓡꝛꞃꞧｒ]/g,\n    s: /[sßśŝşšșȿṡṣṥṧṩẛⓢꞅꞩｓ]/g,\n    t: /[tţťŧƭțʈṫṭṯṱẗⓣⱦꞇｔ]/g,\n    tz: /ꜩ/g,\n    u: /[uùúûüũūŭůűųưǔǖǘǚǜȕȗʉṳṵṷṹṻụủứừửữựⓤｕ]/g,\n    v: /[vʋʌṽṿⓥꝟｖ]/g,\n    vy: /ꝡ/g,\n    w: /[wŵẁẃẅẇẉẘⓦⱳｗ]/g,\n    x: /[xẋẍⓧｘ]/g,\n    y: /[yýÿŷƴȳɏẏẙỳỵỷỹỿⓨｙ]/g,\n    z: /[zźżžƶȥɀẑẓẕⓩⱬꝣｚ]/g,\n  };\n  let parsedString = input;\n\n  Object.entries(removalMap).forEach(([key, value]) => {\n    parsedString = parsedString.replace(value, key);\n  });\n\n  return parsedString;\n}\n\n/**\n * Remove emojis\n */\nexport function removeEmojis(input: string) {\n  const baseEmojiRegex = /[\\u2700-\\u27bf]|\\ud83c[\\udde6-\\uddff]{2}|[\\ud800-\\udbff][\\udc00-\\udfff]/;\n  const variationSelectorRegex = /[\\ufe0e\\ufe0f]?/;\n  const modifierRegex = /[\\u0300-\\u036f\\u20d0-\\u20f0\\ufe20-\\ufe23]|\\ud83c[\\udffb-\\udfff]/;\n  const zeroWidthJoinerRegex =\n    /\\u200d(?:[^\\ud800-\\udfff]|(?:\\ud83c[\\udde6-\\uddff]){2}|[\\ud800-\\udbff][\\udc00-\\udfff])[\\ufe0e\\ufe0f]?(?:[\\u0300-\\u036f\\u20d0-\\u20f0\\ufe20-\\ufe23]|\\ud83c[\\udffb-\\udfff])?/;\n  const emojiRegex = new RegExp(\n    `(?:${baseEmojiRegex.source})${variationSelectorRegex.source}(?:${modifierRegex.source})?(?:${zeroWidthJoinerRegex.source})*`,\n    'g',\n  );\n\n  return input.replace(emojiRegex, '').trim();\n}\n\n/**\n * Remove empty HTML Tags (including whitespace)\n */\nexport function removeEmptyTags(input: string) {\n  return input.replace(/<[^/>][^>]*>\\s*<\\/[^>]+>/gi, '');\n}\n\n/**\n * Remove non-printable ASCII characters\n */\nexport function removeNonPrintableCharacters(input: string) {\n  return input.replace(/[^\\x20-\\x7E´\\u00C0-\\u00FFˆ˜]+/g, '');\n}\n\n/**\n * Remove HTML tags\n */\nexport function removeTags(input: string) {\n  return input.replace(/(<([^>]+)>)/gi, '');\n}\n\n/**\n * Remove whitespace\n */\nexport function removeWhitespace(input: string) {\n  return input.replace(/\\r\\n|\\r|\\n|\\t/g, '').replace(/ +/g, ' ');\n}\n\n/**\n * Format string to slug\n */\nexport function slugify(input: string) {\n  return removeAccents(input)\n    .replace(/[\\u0300-\\u036f]/g, '')\n    .replace(/[()]/g, '')\n    .replace(/ /g, '-')\n    .replace(/[\"%<>\\\\^`{|}]/g, '')\n    .toLowerCase();\n}\n","/**\n * Detect if the device is in dark mode\n */\nexport function isDarkMode() {\n  return !!window.matchMedia && window.matchMedia('(prefers-color-scheme: dark)').matches;\n}\n\n/**\n * Detect if the device supports touch events\n */\nexport function isTouchDevice() {\n  return !!window.matchMedia && window.matchMedia('(pointer: coarse)').matches;\n}\n\n/**\n * Detect if the user prefers reduced motion\n */\nexport function prefersReducedMotion() {\n  return !!window.matchMedia && window.matchMedia('prefers-reduced-motion').matches;\n}\n","import { cleanupNumericString } from './strings';\nimport { FormatDateLocaleOptions, FormatMoneyOptions } from './types';\n\n/**\n * Format boolean into a Yes/No string\n */\nexport function formatBoolean(input: boolean) {\n  return input ? 'Yes' : 'No';\n}\n\n/**\n * Format string into a CPF\n */\nexport function formatCPF(value: string) {\n  const clearValue = cleanupNumericString(value);\n\n  if (clearValue.length >= 10) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(\n      6,\n      9,\n    )}-${clearValue.slice(9, 11)}`;\n  } else if (clearValue.length >= 7) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}.${clearValue.slice(6, 9)}`;\n  } else if (clearValue.length >= 4) {\n    return `${clearValue.slice(0, 3)}.${clearValue.slice(3, 6)}`;\n  }\n\n  return clearValue;\n}\n\n/**\n * Format date ISO string using locale\n */\nexport function formatDateLocale(input: string, options: FormatDateLocaleOptions = {}) {\n  const { locale = 'en-GB', showTime = false } = options;\n\n  const formatOptions: Intl.DateTimeFormatOptions = {\n    year: '2-digit',\n    month: '2-digit',\n    day: '2-digit',\n  };\n\n  if (showTime) {\n    formatOptions.hour = '2-digit';\n    formatOptions.minute = '2-digit';\n  }\n\n  return new Date(input).toLocaleDateString(locale, formatOptions);\n}\n\n/**\n * Format number into money string\n */\nexport function formatMoney(input: number, options: FormatMoneyOptions = {}) {\n  const { decimalChar = '.', showCents = false, symbol = '$', thousandsChar = ',' } = options;\n\n  const isNegative = input < 0;\n  const value = Math.abs(input);\n  const [amount, cents] = value.toFixed(2).split('.');\n  const padStart = amount.length > 3 ? amount.length % 3 : 0;\n  const initial = amount.slice(0, padStart);\n  const remain = amount.slice(padStart).replace(/(\\d{3})(?=\\d)/g, `$1${thousandsChar}`);\n\n  let formatted = `${remain}`;\n\n  if (initial) {\n    formatted = `${initial}${thousandsChar}${remain}`;\n  }\n\n  if (cents !== '00' || showCents) {\n    formatted += `${decimalChar}${cents}`;\n  }\n\n  return `${isNegative ? '-' : ''}${symbol}${formatted}`;\n}\n\n/**\n * Format string into a brazilian phone\n */\nexport function formatPhoneBR(input: string) {\n  const phone = input.replace(/\\D/g, '');\n\n  if (phone.length === 8) {\n    return phone.replace(/^(\\d{4})(\\d{4}).*/, '$1-$2');\n  }\n\n  if (phone.length === 9) {\n    return phone.replace(/^(\\d{5})(\\d{4}).*/, '$1-$2');\n  }\n\n  if (phone.length === 10 || phone.length === 11) {\n    return phone.replace(/^(\\d{2})(\\d{4,5})(\\d{4}).*/, '($1) $2-$3');\n  }\n\n  return phone;\n}\n\n/**\n * Format string into a US phone\n */\nexport function formatPhoneUS(input: string) {\n  const phone = input.replace(/\\D/g, '');\n\n  if (phone.length === 10) {\n    return phone.replace(/^(\\d{3})(\\d{3})(\\d{4}).*/, '($1) $2-$3');\n  }\n\n  if (phone.length === 11 && phone.startsWith('1')) {\n    return phone.replace(/^1(\\d{3})(\\d{3})(\\d{4}).*/, '+1 ($1) $2-$3');\n  }\n\n  return phone;\n}\n\n/**\n * Format string into a zip code\n */\nexport function formatPostalCodeBR(value: string) {\n  const clearValue = cleanupNumericString(value);\n\n  if (clearValue.length >= 6) {\n    return `${clearValue.slice(0, 5)}-${clearValue.slice(5, 8)}`;\n  }\n\n  return clearValue;\n}\n","/**\n * Creates a debounced version of a callback function.\n *\n * The debounced function delays the execution of the callback until after the specified delay\n * has passed since the last time the debounced function was called. If the debounced function\n * is called again before the delay has passed, the timer resets.\n */\nexport function debounce(callback: (...parameters: any[]) => void, delay: number) {\n  let timeout: ReturnType<typeof setTimeout>;\n\n  return (...parameters: any[]) => {\n    // Clear any existing timer to reset the debounce delay\n    clearTimeout(timeout);\n\n    // Start a new timer to call the callback after the specified delay\n    timeout = setTimeout(() => callback(...parameters), delay);\n  };\n}\n\n/**\n * Decouple methods from objects\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport function demethodize(fn: Function) {\n  return (parameter: any, ...rest: any[]) => fn.apply(parameter, rest);\n}\n\n/**\n * Measure function execution time\n */\n// eslint-disable-next-line @typescript-eslint/no-unsafe-function-type\nexport async function measureExecutionTime<T = any>(callback: Function): Promise<T> {\n  const start = performance.now();\n\n  const result = await callback();\n\n  const end = performance.now();\n  const total = end - start;\n\n  // eslint-disable-next-line no-console\n  console.log(`Completed in ${Math.ceil(total)} milliseconds`);\n\n  return result as T;\n}\n\n/**\n * A function that does nothing.\n */\nexport function noop() {\n  return undefined;\n}\n\n/**\n * Creates a function that will only be called once.\n * Repeat calls return the value of the first invocation.\n */\nexport function once<T extends (...arguments_: Array<any>) => any>(fn: T): T {\n  let done = false;\n  let result: ReturnType<T>;\n\n  return function Fn(...arguments_: Parameters<T>): ReturnType<T> {\n    if (!done) {\n      done = true;\n      result = fn(...arguments_);\n    }\n\n    return result;\n  } as T;\n}\n\n/**\n * Combine multiple functions into one.\n * The output of each function is passed as the input to the next.\n */\nexport function pipe<T>(...fns: Array<(argument: T) => T>) {\n  return (input: T) => fns.reduce((previousValue, fn) => fn(previousValue), input);\n}\n","import { StringOrNumber } from '@gilbarbara/types';\nimport is from 'is-lite';\n\nimport { pad } from './numbers';\nimport { LoggerOptions, UniqueOptions } from './types';\n\ntype Case<T = void> = [boolean, () => T];\n\nexport function canUseDOM() {\n  return !!(typeof window !== 'undefined' && window.document?.createElement);\n}\n\nexport function conditional<TReturn = void>(\n  cases: Array<Case<TReturn>>,\n  defaultCase?: () => TReturn,\n) {\n  for (const [expression, callback] of cases) {\n    if (expression) {\n      return callback();\n    }\n  }\n\n  return defaultCase?.();\n}\n\n/**\n * Copy a string to the clipboard\n */\nexport async function copyToClipboard(input: string) {\n  try {\n    await navigator.clipboard.writeText(input);\n  } catch {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Get the data type of variable.\n */\nexport function getDataType(input: unknown, toLowerCase = false): string {\n  const dataTypeName = Object.prototype.toString.call(input).slice(8, -1);\n  let output = dataTypeName;\n\n  if (/HTML\\w+Element/.test(dataTypeName)) {\n    output = 'HTMLElement';\n  }\n\n  return toLowerCase ? output.toLowerCase() : output;\n}\n\nexport function invariant(condition: any, message: string | (() => string)): asserts condition {\n  if (condition) {\n    return;\n  }\n\n  const value = is.function(message) ? message() : message;\n\n  throw new Error(value);\n}\n\n/**\n * Check if a string is a valid JSON\n */\nexport function isJSON(input: string) {\n  try {\n    JSON.parse(input);\n  } catch {\n    return false;\n  }\n\n  return true;\n}\n\n/**\n * Throw an error if the parameter isn't provided\n */\nexport function isRequired(input = 'parameter', Constructable = TypeError) {\n  throw new Constructable(`\"${input}\" is required`);\n}\n\n/**\n * Log grouped messages to the console\n */\nexport function logger(type: string, title: string, data: any, options: LoggerOptions = {}) {\n  /* eslint-disable no-console */\n  const { collapsed = true, hideTimestamp = false, skip = false, typeColor = 'gray' } = options;\n  const groupMethod = collapsed ? console.groupCollapsed : console.group;\n  const date = new Date();\n  const parts = [`%c ${type}`];\n  const styles = [`color: ${typeColor}; font-weight: lighter;`, 'color: inherit;'];\n\n  if (!hideTimestamp) {\n    styles.push('color: gray; font-weight: lighter;');\n  }\n\n  const time = `${pad(date.getHours(), 2)}:${pad(date.getMinutes(), 2)}:${pad(\n    date.getSeconds(),\n    2,\n  )}`;\n\n  parts.push(`%c${title}`);\n\n  if (!hideTimestamp) {\n    parts.push(`%c@ ${time}`);\n  }\n\n  if (!skip) {\n    groupMethod(parts.join(' '), ...styles);\n    console.log(data);\n    console.groupEnd();\n  }\n  /* eslint-enable */\n}\n\n/**\n * Returns the value or null\n */\nexport function nullify<T>(value: T) {\n  return value ?? null;\n}\n\n/* eslint-disable @typescript-eslint/no-unsafe-function-type */\n/**\n * Add the event listener to the target\n */\nexport function on<T extends Window | Document | HTMLElement | EventTarget>(\n  target: T | null,\n  ...rest: Parameters<T['addEventListener']> | [string, Function | null, ...any]\n): void {\n  if (target?.addEventListener) {\n    target.addEventListener(...(rest as Parameters<HTMLElement['addEventListener']>));\n  }\n}\n\n/**\n * Remove the event listener from the target\n */\nexport function off<T extends Window | Document | HTMLElement | EventTarget>(\n  target: T | null,\n  ...rest: Parameters<T['removeEventListener']> | [string, Function | null, ...any]\n): void {\n  if (target?.removeEventListener) {\n    target.removeEventListener(...(rest as Parameters<HTMLElement['removeEventListener']>));\n  }\n}\n/* eslint-enable @typescript-eslint/no-unsafe-function-type */\n\nexport function popupCenter(url: string, title: string, width: number, height: number) {\n  const { screen, screenLeft, screenTop } = window;\n  let screenWidth = window.innerWidth;\n  let screenHeight = window.innerHeight;\n\n  /* c8 ignore next 5 */\n  if (!screenWidth) {\n    screenWidth = document.documentElement.clientWidth\n      ? document.documentElement.clientWidth\n      : screen.width;\n  }\n\n  /* c8 ignore next 5 */\n  if (!screenHeight) {\n    screenHeight = document.documentElement.clientHeight\n      ? document.documentElement.clientHeight\n      : screen.height;\n  }\n\n  const left = screenWidth / 2 - width / 2 + screenLeft;\n  const top = screenHeight / 2 - height / 2 + screenTop;\n\n  const popup = window.open(\n    url,\n    title,\n    `menubar=no,location=no,resizable=no,scrollbars=yees,status=no,width=${width},height=${height},top=${top}, left=${left}`,\n  );\n\n  if (popup) {\n    popup.focus();\n  }\n\n  return popup;\n}\n\nexport function px(value: undefined): undefined;\nexport function px(value: StringOrNumber): string;\nexport function px(value: StringOrNumber | undefined): string | undefined;\n\n/**\n * Convert a number or numeric value to px\n *\n * Otherwise, return the value.\n */\nexport function px(value: StringOrNumber | undefined): string | undefined {\n  return is.number(value) || is.numericString(value) ? `${value}px` : value;\n}\n\n/**\n * Return a unique string\n */\nexport function unique(length = 8, options: UniqueOptions = {}): string {\n  const {\n    includeLowercase = true,\n    includeNumbers = true,\n    includeSymbols = false,\n    includeUppercase = true,\n  } = options;\n  const lowercase = 'abcdefghijklmnopqrstuvwxyz';\n  const uppercase = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';\n  const numbers = '0123456789';\n  const symbols = '!?@#$%^&*+_-=:.~';\n\n  let characters = '';\n\n  if (includeLowercase) {\n    characters += lowercase;\n  }\n\n  if (includeUppercase) {\n    characters += uppercase;\n  }\n\n  if (includeNumbers) {\n    characters += numbers;\n  }\n\n  if (includeSymbols) {\n    characters += symbols;\n  }\n\n  let result = '';\n\n  for (let index = length; index > 0; --index) {\n    result += characters[Math.round(Math.random() * (characters.length - 1))];\n  }\n\n  return result;\n}\n\n/**\n * Returns an UUID v4 string.\n */\nexport function uuid() {\n  /* eslint-disable no-bitwise */\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, c => {\n    const r = (Math.random() * 16) | 0;\n    const v = c === 'x' ? r : (r & 0x3) | 0x8;\n\n    return v.toString(16);\n  });\n  /* eslint-enable */\n}\n","/**\n * Ceil decimal numbers\n */\nexport function ceil(input: number, digits = 2) {\n  const factor = 10 ** digits;\n\n  return Math.ceil(input * factor) / factor;\n}\n\n/**\n * Limit number between range\n */\nexport function clamp(value: number, min = 0, max = 100) {\n  return Math.min(Math.max(value, min), max);\n}\n\n/**\n * Floor decimal numbers\n */\nexport function floor(input: number, digits = 2) {\n  const factor = 10 ** digits;\n\n  return Math.floor(input * factor) / factor;\n}\n\n/**\n * Pad a number with zeros\n */\nexport function pad(input: number, length = 2) {\n  return `${input}`.padStart(length, '0');\n}\n\n/**\n * Calculate the percentage of a number in relation to the total\n */\nexport function percentage(input: number, total: number, digits: number = 2) {\n  const result = (input / total) * 100;\n\n  return Number.isFinite(result) ? round(result, digits) : 0;\n}\n\n/**\n * Returns a random number\n */\nexport function randomNumber(min = 0, max = 10) {\n  if (min >= max) {\n    return max;\n  }\n\n  return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\n/**\n * Round decimal numbers\n */\nexport function round(input: number, digits = 2) {\n  const factor = 10 ** digits;\n\n  return Math.round(input * factor) / factor;\n}\n","import { NarrowPlainObject, PlainObject, RemoveType, Simplify } from '@gilbarbara/types';\nimport is from 'is-lite';\n\nimport { InvertKeyValue, QueryStringFormatOptions } from './types';\n\n/**\n * Remove properties with undefined value from an object\n */\nexport function cleanUpObject<T extends PlainObject>(input: T) {\n  const output: Record<string, unknown> = {};\n\n  for (const key in input) {\n    if (input[key] !== undefined) {\n      output[key] = input[key];\n    }\n  }\n\n  return output as RemoveType<T>;\n}\n\n/**\n * Get a nested property inside an object or array\n */\nexport function getNestedProperty<T extends PlainObject<any>>(input: T, path: string): any {\n  if ((!is.plainObject(input) && !is.array(input)) || !path) {\n    return input;\n  }\n\n  const segments = path.split('.');\n  const { length } = segments;\n  let output = input;\n\n  for (let index = 0; index < length; index++) {\n    const currentSegment = segments[index];\n    const remainingSegments = segments.slice(index + 1);\n\n    if (currentSegment === '+' && is.array(output) && remainingSegments.length === 1) {\n      return output.map(d => d[remainingSegments.join('.')]);\n    }\n\n    try {\n      output = output[currentSegment];\n    } catch {\n      // skip\n    }\n  }\n\n  return output;\n}\n\n/**\n * Invert object key and value\n */\nexport function invertKeys<const T extends PlainObject<PropertyKey>>(input: T) {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  const result: Record<PropertyKey, PropertyKey> = {};\n\n  for (const [key, value] of Object.entries(input)) {\n    result[value] = key;\n  }\n\n  return result as InvertKeyValue<T>;\n}\n\n/**\n * Set the key as the value\n */\nexport function keyMirror<T extends PlainObject>(input: T): { [K in keyof T]: K } {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  const output: any = {};\n\n  for (const key in input) {\n    if (!Object.prototype.hasOwnProperty.call(output, key)) {\n      output[key] = key;\n    }\n  }\n\n  return output;\n}\n\n/**\n * Merges the defaultProps with literal values with the incoming props, removing undefined values from it that would override the defaultProps.\n * The result is a type-safe object with the defaultProps as required properties.\n */\nexport function mergeProps<TDefaultProps extends PlainObject<any>, TProps extends PlainObject<any>>(\n  defaultProps: TDefaultProps,\n  props: TProps,\n) {\n  const cleanProps = cleanUpObject(props);\n\n  return { ...defaultProps, ...cleanProps } as unknown as Simplify<\n    TProps & Required<Pick<TProps, keyof TDefaultProps & string>>\n  >;\n}\n\n/**\n * Type-safe Object.entries()\n */\nexport function objectEntries<T extends PlainObject<any>>(input: T) {\n  return Object.entries(input) as Array<{ [K in keyof T]-?: [K, T[K]] }[keyof T]>;\n}\n\n/**\n * Type-safe Object.keys()\n */\nexport function objectKeys<T extends PlainObject<any>>(input: T) {\n  return Object.keys(input) as Array<keyof T>;\n}\n\n/**\n * Convert an object to an array of objects\n */\nexport function objectToArray<T extends PlainObject>(input: T, includeOnly?: string) {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  return Object.entries(input)\n    .filter(([, value]) => (includeOnly ? typeof value === `${includeOnly}` : true)) // eslint-disable-line valid-typeof\n    .map(([key, value]) => ({ [key]: value }));\n}\n\n/**\n * Remove properties from an object\n */\nexport function omit<T extends Record<string, any>, K extends keyof T>(\n  input: NarrowPlainObject<T>,\n  ...filter: K[]\n) {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  const output: any = {};\n\n  for (const key in input) {\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (!filter.includes(key as unknown as K)) {\n        output[key] = input[key];\n      }\n    }\n  }\n\n  return output as Omit<T, K>;\n}\n\n/**\n * Select properties from an object\n */\nexport function pick<T extends Record<string, any>, K extends keyof T>(\n  input: NarrowPlainObject<T>,\n  ...filter: K[]\n) {\n  if (!is.plainObject(input)) {\n    throw new TypeError('Expected an object');\n  }\n\n  if (!filter.length) {\n    return input;\n  }\n\n  const output: any = {};\n\n  for (const key in input) {\n    if ({}.hasOwnProperty.call(input, key)) {\n      if (filter.includes(key as unknown as K)) {\n        output[key] = input[key];\n      }\n    }\n  }\n\n  return output as Pick<T, K>;\n}\n\n/**\n * Stringify a shallow object into a query string\n */\nexport function queryStringFormat<T extends PlainObject>(\n  input: T,\n  options: QueryStringFormatOptions = {},\n) {\n  const { addPrefix = false, encoder = encodeURIComponent, encodeValuesOnly = true } = options;\n\n  if (!is.plainObject(input)) {\n    throw new TypeError(\"input type isn't supported\");\n  }\n\n  const isValidInput = Object.values(input).every(item => {\n    if (is.array(item)) {\n      return item.every(d => is.string(d) || is.number(d));\n    }\n\n    return is.string(item);\n  });\n\n  if (!isValidInput) {\n    throw new TypeError(\"input format isn't supported\");\n  }\n\n  const output = Object.entries(input)\n    .map(([key, value]) => {\n      const nextKey = encodeValuesOnly ? key : encoder(key);\n      const nextValue = is.array(value) ? value.map(encoder).join(',') : encoder(`${value}`);\n\n      return `${nextKey}=${nextValue}`;\n    })\n    .join('&');\n\n  return `${addPrefix ? '?' : ''}${output}`;\n}\n\n/**\n * Parse a query string\n */\nexport function queryStringParse(input: string): PlainObject<string> {\n  let search = input;\n\n  if (input.slice(0, 1) === '?') {\n    search = input.slice(1);\n  }\n\n  return search.split('&').reduce<PlainObject<string>>((acc, d) => {\n    const [key, value] = d.split('=');\n\n    acc[decodeURIComponent(key)] = decodeURIComponent(value);\n\n    return acc;\n  }, {});\n}\n\n/**\n * Sort object keys\n */\nexport function sortObjectKeys<T extends PlainObject>(input: T) {\n  return objectKeys(input)\n    .sort()\n    .reduce((acc, key) => {\n      acc[key] = input[key];\n\n      return acc;\n    }, {} as T);\n}\n","import is from 'is-lite';\n\nimport { round } from './numbers';\n\n/**\n * Returns the average of two or more numbers\n */\nexport function mean(input: number[], precision?: number) {\n  const output = input.reduce((sum, value) => sum + value, 0) / input.length;\n\n  if (is.number(precision)) {\n    return round(output, precision);\n  }\n\n  return output;\n}\n\n/**\n * Returns the median of two or more numbers\n */\nexport function median(input: number[]) {\n  const sorted = [...input].sort((a, b) => a - b);\n  const middle = Math.floor(sorted.length / 2);\n\n  if (sorted.length % 2 === 0) {\n    return (sorted[middle - 1] + sorted[middle]) / 2;\n  }\n\n  return sorted[middle];\n}\n\n/**\n * Returns the mode of two or more numbers\n */\nexport function mode(input: number[]) {\n  const count = new Map<number, number>();\n\n  for (const value of input) {\n    const current = count.get(value) ?? 0;\n\n    count.set(value, current + 1);\n  }\n\n  const sorted = [...count.entries()].sort((a, b) => b[1] - a[1]);\n\n  return sorted[0][0];\n}\n","/**\n * Check if CPF is valid\n */\nimport { ValidatePasswordOptions } from './types';\n\nexport function isValidCPF(value: string) {\n  if (!value) {\n    return false;\n  }\n\n  const newValue = value.replace(/[.-]/g, '');\n  let sum = 0;\n  let rest: number;\n\n  if (/^(\\d)\\1+$/.test(newValue)) {\n    return false;\n  }\n\n  for (let index = 1; index <= 9; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (11 - index);\n  }\n\n  rest = (sum * 10) % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  if (rest !== parseInt(newValue.substring(9, 10), 10)) {\n    return false;\n  }\n\n  sum = 0;\n\n  for (let index = 1; index <= 10; index++) {\n    sum += parseInt(newValue.substring(index - 1, index), 10) * (12 - index);\n  }\n\n  rest = (sum * 10) % 11;\n\n  if (rest === 10 || rest === 11) {\n    rest = 0;\n  }\n\n  return rest === parseInt(newValue.substring(10, 11), 10);\n}\n\n/**\n * Check if email is valid\n */\nexport function isValidEmail(value: string) {\n  return /^[\\w%+.-]+@[\\d.a-z-]+\\.[a-z]{2,}$/i.test(value);\n}\n\n/**\n * Validate password length and required characters\n * @throws\n */\nexport function validatePassword(password: string, options?: ValidatePasswordOptions) {\n  const {\n    maxLength = 64,\n    maxLengthMessage = 'Password must be a maximum of 64 characters',\n    minLength = 6,\n    minLengthMessage = 'Password must be at least 6 characters long',\n    regex = /^(?=.*[A-Z])(?=.*[a-z])(?=.*\\d)(?=.*[!#$%&*?@^]).*$/,\n    requiredCharactersMessage = 'Password must have at least 1 number, 1 lowercase, 1 uppercase and 1 special character',\n  } = options || {};\n\n  if (password.length < minLength) {\n    throw new Error(minLengthMessage);\n  }\n\n  if (password.length > maxLength) {\n    throw new Error(maxLengthMessage);\n  }\n\n  if (!regex.test(password)) {\n    throw new Error(requiredCharactersMessage);\n  }\n\n  return true;\n}\n","import { HttpMethods, PlainObject } from '@gilbarbara/types';\n\nexport interface CorsOptions {\n  /** @default true */\n  allowCredentials?: boolean;\n  /** @default [] */\n  allowedHeaders?: string[];\n  /** @default ['GET'] */\n  methods?: HttpMethods[];\n  /** @default * */\n  origin?: string;\n  responseHeaders?: PlainObject<string>;\n  /** @default 200 */\n  statusCode?: number;\n}\n\nexport interface FormatDateLocaleOptions {\n  locale?: string;\n  showTime?: boolean;\n}\n\nexport interface FormatMoneyOptions {\n  decimalChar?: ',' | '.';\n  showCents?: boolean;\n  symbol?: string;\n  thousandsChar?: ',' | '.';\n}\n\nexport type InvertKeyValue<T extends Record<PropertyKey, PropertyKey>> = {\n  [K in T[keyof T]]: { [P in keyof T]: T[P] extends K ? P : never }[keyof T];\n};\n\nexport interface LoggerOptions {\n  collapsed?: boolean;\n  hideTimestamp?: boolean;\n  skip?: boolean;\n  typeColor?: string;\n}\n\nexport interface PollOptions {\n  delay?: number;\n  maxRetries?: number;\n}\n\nexport interface QueryStringFormatOptions {\n  addPrefix?: boolean;\n  encodeValuesOnly?: boolean;\n  encoder?: (uri: string) => string;\n}\n\nexport interface RequestOptions {\n  body?: any;\n  headers?: PlainObject<string>;\n  method?: HttpMethods;\n}\n\nexport interface RequestError extends Error {\n  response: any;\n  status: number;\n}\n\nexport interface SortFunction {\n  <T extends PlainObject = PlainObject>(left: PlainObject<T>, right: PlainObject<T>): number;\n  <T = string>(left: T, right: T): number;\n}\n\nexport interface TimeSinceOptions {\n  /**\n   * @default \"day\"\n   */\n  day?: string;\n  /**\n   * @default \"days\"\n   */\n  days?: string;\n  /**\n   * @default \"hour\"\n   */\n  hour?: string;\n  /**\n   * @default \"hours\"\n   */\n  hours?: string;\n  /**\n   * @default \"minute\"\n   */\n  minute?: string;\n  /**\n   * @default \"minutes\"\n   */\n  minutes?: string;\n  /**\n   * @default \"month\"\n   */\n  month?: string;\n  /**\n   * @default \"months\"\n   */\n  months?: string;\n  prefix?: string;\n  /**\n   * @default \"second\"\n   */\n  second?: string;\n  /**\n   * @default \"seconds\"\n   */\n  seconds?: string;\n  /**\n   * @default false\n   */\n  skipWeeks?: boolean;\n  /**\n   * @default \"ago\"\n   */\n  suffix?: string;\n  /**\n   * @default \"week\"\n   */\n  week?: string;\n  /**\n   * @default \"weeks\"\n   */\n  weeks?: string;\n  /**\n   * @default \"year\"\n   */\n  year?: string;\n  /**\n   * @default \"years\"\n   */\n  years?: string;\n}\n\nexport interface UniqueOptions {\n  includeLowercase?: boolean;\n  includeNumbers?: boolean;\n  includeSymbols?: boolean;\n  includeUppercase?: boolean;\n}\n\nexport interface ValidatePasswordOptions {\n  maxLength?: number;\n  maxLengthMessage?: string;\n  minLength?: number;\n  minLengthMessage?: string;\n  regex?: RegExp;\n  requiredCharactersMessage?: string;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script"}